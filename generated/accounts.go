// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.
// This file contains parsers for the accounts defined in the IDL.

package kamino_lending

import (
	"fmt"
	binary "github.com/gagliardetto/binary"
)

func ParseAnyAccount(accountData []byte) (any, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek account discriminator: %w", err)
	}
	switch discriminator {
	case Account_UserState:
		value := new(UserState)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as UserState: %w", err)
		}
		return value, nil
	case Account_GlobalConfig:
		value := new(GlobalConfig)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as GlobalConfig: %w", err)
		}
		return value, nil
	case Account_LendingMarket:
		value := new(LendingMarket)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as LendingMarket: %w", err)
		}
		return value, nil
	case Account_Obligation:
		value := new(Obligation)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as Obligation: %w", err)
		}
		return value, nil
	case Account_ReferrerState:
		value := new(ReferrerState)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as ReferrerState: %w", err)
		}
		return value, nil
	case Account_ReferrerTokenState:
		value := new(ReferrerTokenState)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as ReferrerTokenState: %w", err)
		}
		return value, nil
	case Account_ShortUrl:
		value := new(ShortUrl)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as ShortUrl: %w", err)
		}
		return value, nil
	case Account_UserMetadata:
		value := new(UserMetadata)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as UserMetadata: %w", err)
		}
		return value, nil
	case Account_Reserve:
		value := new(Reserve)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as Reserve: %w", err)
		}
		return value, nil
	default:
		return nil, fmt.Errorf("unknown discriminator: %s", binary.FormatDiscriminator(discriminator))
	}
}

func ParseAccount_UserState(accountData []byte) (*UserState, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_UserState {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_UserState, binary.FormatDiscriminator(discriminator))
	}
	acc := new(UserState)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type UserState: %w", err)
	}
	return acc, nil
}

func ParseAccount_GlobalConfig(accountData []byte) (*GlobalConfig, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_GlobalConfig {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_GlobalConfig, binary.FormatDiscriminator(discriminator))
	}
	acc := new(GlobalConfig)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type GlobalConfig: %w", err)
	}
	return acc, nil
}

func ParseAccount_LendingMarket(accountData []byte) (*LendingMarket, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_LendingMarket {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_LendingMarket, binary.FormatDiscriminator(discriminator))
	}
	acc := new(LendingMarket)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type LendingMarket: %w", err)
	}
	return acc, nil
}

func ParseAccount_Obligation(accountData []byte) (*Obligation, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_Obligation {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_Obligation, binary.FormatDiscriminator(discriminator))
	}
	acc := new(Obligation)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type Obligation: %w", err)
	}
	return acc, nil
}

func ParseAccount_ReferrerState(accountData []byte) (*ReferrerState, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_ReferrerState {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_ReferrerState, binary.FormatDiscriminator(discriminator))
	}
	acc := new(ReferrerState)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type ReferrerState: %w", err)
	}
	return acc, nil
}

func ParseAccount_ReferrerTokenState(accountData []byte) (*ReferrerTokenState, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_ReferrerTokenState {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_ReferrerTokenState, binary.FormatDiscriminator(discriminator))
	}
	acc := new(ReferrerTokenState)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type ReferrerTokenState: %w", err)
	}
	return acc, nil
}

func ParseAccount_ShortUrl(accountData []byte) (*ShortUrl, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_ShortUrl {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_ShortUrl, binary.FormatDiscriminator(discriminator))
	}
	acc := new(ShortUrl)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type ShortUrl: %w", err)
	}
	return acc, nil
}

func ParseAccount_UserMetadata(accountData []byte) (*UserMetadata, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_UserMetadata {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_UserMetadata, binary.FormatDiscriminator(discriminator))
	}
	acc := new(UserMetadata)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type UserMetadata: %w", err)
	}
	return acc, nil
}

func ParseAccount_Reserve(accountData []byte) (*Reserve, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_Reserve {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_Reserve, binary.FormatDiscriminator(discriminator))
	}
	acc := new(Reserve)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type Reserve: %w", err)
	}
	return acc, nil
}
