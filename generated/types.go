// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.
// This file contains parsers for the types defined in the IDL.

package kamino_lending

import (
	"bytes"
	"fmt"
	errors "github.com/gagliardetto/anchor-go/errors"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
)

type UpdateConfigMode binary.BorshEnum

const (
	UpdateConfigMode_UpdateLoanToValuePct UpdateConfigMode = iota
	UpdateConfigMode_UpdateMaxLiquidationBonusBps
	UpdateConfigMode_UpdateLiquidationThresholdPct
	UpdateConfigMode_UpdateProtocolLiquidationFee
	UpdateConfigMode_UpdateProtocolTakeRate
	UpdateConfigMode_UpdateFeesBorrowFee
	UpdateConfigMode_UpdateFeesFlashLoanFee
	UpdateConfigMode_DeprecatedUpdateFeesReferralFeeBps
	UpdateConfigMode_UpdateDepositLimit
	UpdateConfigMode_UpdateBorrowLimit
	UpdateConfigMode_UpdateTokenInfoLowerHeuristic
	UpdateConfigMode_UpdateTokenInfoUpperHeuristic
	UpdateConfigMode_UpdateTokenInfoExpHeuristic
	UpdateConfigMode_UpdateTokenInfoTwapDivergence
	UpdateConfigMode_UpdateTokenInfoScopeTwap
	UpdateConfigMode_UpdateTokenInfoScopeChain
	UpdateConfigMode_UpdateTokenInfoName
	UpdateConfigMode_UpdateTokenInfoPriceMaxAge
	UpdateConfigMode_UpdateTokenInfoTwapMaxAge
	UpdateConfigMode_UpdateScopePriceFeed
	UpdateConfigMode_UpdatePythPrice
	UpdateConfigMode_UpdateSwitchboardFeed
	UpdateConfigMode_UpdateSwitchboardTwapFeed
	UpdateConfigMode_UpdateBorrowRateCurve
	UpdateConfigMode_UpdateEntireReserveConfig
	UpdateConfigMode_UpdateDebtWithdrawalCap
	UpdateConfigMode_UpdateDepositWithdrawalCap
	UpdateConfigMode_DeprecatedUpdateDebtWithdrawalCapCurrentTotal
	UpdateConfigMode_DeprecatedUpdateDepositWithdrawalCapCurrentTotal
	UpdateConfigMode_UpdateBadDebtLiquidationBonusBps
	UpdateConfigMode_UpdateMinLiquidationBonusBps
	UpdateConfigMode_UpdateDeleveragingMarginCallPeriod
	UpdateConfigMode_UpdateBorrowFactor
	UpdateConfigMode_UpdateAssetTier
	UpdateConfigMode_UpdateElevationGroup
	UpdateConfigMode_UpdateDeleveragingThresholdDecreaseBpsPerDay
	UpdateConfigMode_DeprecatedUpdateMultiplierSideBoost
	UpdateConfigMode_DeprecatedUpdateMultiplierTagBoost
	UpdateConfigMode_UpdateReserveStatus
	UpdateConfigMode_UpdateFarmCollateral
	UpdateConfigMode_UpdateFarmDebt
	UpdateConfigMode_UpdateDisableUsageAsCollateralOutsideEmode
	UpdateConfigMode_UpdateBlockBorrowingAboveUtilizationPct
	UpdateConfigMode_UpdateBlockPriceUsage
	UpdateConfigMode_UpdateBorrowLimitOutsideElevationGroup
	UpdateConfigMode_UpdateBorrowLimitsInElevationGroupAgainstThisReserve
	UpdateConfigMode_UpdateHostFixedInterestRateBps
	UpdateConfigMode_UpdateAutodeleverageEnabled
	UpdateConfigMode_UpdateDeleveragingBonusIncreaseBpsPerDay
	UpdateConfigMode_UpdateProtocolOrderExecutionFee
)

func (value UpdateConfigMode) String() string {
	switch value {
	case UpdateConfigMode_UpdateLoanToValuePct:
		return "UpdateLoanToValuePct"
	case UpdateConfigMode_UpdateMaxLiquidationBonusBps:
		return "UpdateMaxLiquidationBonusBps"
	case UpdateConfigMode_UpdateLiquidationThresholdPct:
		return "UpdateLiquidationThresholdPct"
	case UpdateConfigMode_UpdateProtocolLiquidationFee:
		return "UpdateProtocolLiquidationFee"
	case UpdateConfigMode_UpdateProtocolTakeRate:
		return "UpdateProtocolTakeRate"
	case UpdateConfigMode_UpdateFeesBorrowFee:
		return "UpdateFeesBorrowFee"
	case UpdateConfigMode_UpdateFeesFlashLoanFee:
		return "UpdateFeesFlashLoanFee"
	case UpdateConfigMode_DeprecatedUpdateFeesReferralFeeBps:
		return "DeprecatedUpdateFeesReferralFeeBps"
	case UpdateConfigMode_UpdateDepositLimit:
		return "UpdateDepositLimit"
	case UpdateConfigMode_UpdateBorrowLimit:
		return "UpdateBorrowLimit"
	case UpdateConfigMode_UpdateTokenInfoLowerHeuristic:
		return "UpdateTokenInfoLowerHeuristic"
	case UpdateConfigMode_UpdateTokenInfoUpperHeuristic:
		return "UpdateTokenInfoUpperHeuristic"
	case UpdateConfigMode_UpdateTokenInfoExpHeuristic:
		return "UpdateTokenInfoExpHeuristic"
	case UpdateConfigMode_UpdateTokenInfoTwapDivergence:
		return "UpdateTokenInfoTwapDivergence"
	case UpdateConfigMode_UpdateTokenInfoScopeTwap:
		return "UpdateTokenInfoScopeTwap"
	case UpdateConfigMode_UpdateTokenInfoScopeChain:
		return "UpdateTokenInfoScopeChain"
	case UpdateConfigMode_UpdateTokenInfoName:
		return "UpdateTokenInfoName"
	case UpdateConfigMode_UpdateTokenInfoPriceMaxAge:
		return "UpdateTokenInfoPriceMaxAge"
	case UpdateConfigMode_UpdateTokenInfoTwapMaxAge:
		return "UpdateTokenInfoTwapMaxAge"
	case UpdateConfigMode_UpdateScopePriceFeed:
		return "UpdateScopePriceFeed"
	case UpdateConfigMode_UpdatePythPrice:
		return "UpdatePythPrice"
	case UpdateConfigMode_UpdateSwitchboardFeed:
		return "UpdateSwitchboardFeed"
	case UpdateConfigMode_UpdateSwitchboardTwapFeed:
		return "UpdateSwitchboardTwapFeed"
	case UpdateConfigMode_UpdateBorrowRateCurve:
		return "UpdateBorrowRateCurve"
	case UpdateConfigMode_UpdateEntireReserveConfig:
		return "UpdateEntireReserveConfig"
	case UpdateConfigMode_UpdateDebtWithdrawalCap:
		return "UpdateDebtWithdrawalCap"
	case UpdateConfigMode_UpdateDepositWithdrawalCap:
		return "UpdateDepositWithdrawalCap"
	case UpdateConfigMode_DeprecatedUpdateDebtWithdrawalCapCurrentTotal:
		return "DeprecatedUpdateDebtWithdrawalCapCurrentTotal"
	case UpdateConfigMode_DeprecatedUpdateDepositWithdrawalCapCurrentTotal:
		return "DeprecatedUpdateDepositWithdrawalCapCurrentTotal"
	case UpdateConfigMode_UpdateBadDebtLiquidationBonusBps:
		return "UpdateBadDebtLiquidationBonusBps"
	case UpdateConfigMode_UpdateMinLiquidationBonusBps:
		return "UpdateMinLiquidationBonusBps"
	case UpdateConfigMode_UpdateDeleveragingMarginCallPeriod:
		return "UpdateDeleveragingMarginCallPeriod"
	case UpdateConfigMode_UpdateBorrowFactor:
		return "UpdateBorrowFactor"
	case UpdateConfigMode_UpdateAssetTier:
		return "UpdateAssetTier"
	case UpdateConfigMode_UpdateElevationGroup:
		return "UpdateElevationGroup"
	case UpdateConfigMode_UpdateDeleveragingThresholdDecreaseBpsPerDay:
		return "UpdateDeleveragingThresholdDecreaseBpsPerDay"
	case UpdateConfigMode_DeprecatedUpdateMultiplierSideBoost:
		return "DeprecatedUpdateMultiplierSideBoost"
	case UpdateConfigMode_DeprecatedUpdateMultiplierTagBoost:
		return "DeprecatedUpdateMultiplierTagBoost"
	case UpdateConfigMode_UpdateReserveStatus:
		return "UpdateReserveStatus"
	case UpdateConfigMode_UpdateFarmCollateral:
		return "UpdateFarmCollateral"
	case UpdateConfigMode_UpdateFarmDebt:
		return "UpdateFarmDebt"
	case UpdateConfigMode_UpdateDisableUsageAsCollateralOutsideEmode:
		return "UpdateDisableUsageAsCollateralOutsideEmode"
	case UpdateConfigMode_UpdateBlockBorrowingAboveUtilizationPct:
		return "UpdateBlockBorrowingAboveUtilizationPct"
	case UpdateConfigMode_UpdateBlockPriceUsage:
		return "UpdateBlockPriceUsage"
	case UpdateConfigMode_UpdateBorrowLimitOutsideElevationGroup:
		return "UpdateBorrowLimitOutsideElevationGroup"
	case UpdateConfigMode_UpdateBorrowLimitsInElevationGroupAgainstThisReserve:
		return "UpdateBorrowLimitsInElevationGroupAgainstThisReserve"
	case UpdateConfigMode_UpdateHostFixedInterestRateBps:
		return "UpdateHostFixedInterestRateBps"
	case UpdateConfigMode_UpdateAutodeleverageEnabled:
		return "UpdateAutodeleverageEnabled"
	case UpdateConfigMode_UpdateDeleveragingBonusIncreaseBpsPerDay:
		return "UpdateDeleveragingBonusIncreaseBpsPerDay"
	case UpdateConfigMode_UpdateProtocolOrderExecutionFee:
		return "UpdateProtocolOrderExecutionFee"
	default:
		return ""
	}
}

// The "isUpdateLendingMarketConfigValue" interface for the "UpdateLendingMarketConfigValue" complex enum.
type UpdateLendingMarketConfigValue interface {
	isUpdateLendingMarketConfigValue()
}

type updateLendingMarketConfigValueEnumContainer struct {
	Enum           binary.BorshEnum `bin:"enum"`
	Bool           UpdateLendingMarketConfigValue_Bool
	U8             UpdateLendingMarketConfigValue_U8
	U8Array        UpdateLendingMarketConfigValue_U8Array
	U16            UpdateLendingMarketConfigValue_U16
	U64            UpdateLendingMarketConfigValue_U64
	U128           UpdateLendingMarketConfigValue_U128
	Pubkey         UpdateLendingMarketConfigValue_Pubkey
	ElevationGroup UpdateLendingMarketConfigValue_ElevationGroup
	Name           UpdateLendingMarketConfigValue_Name
}

func DecodeUpdateLendingMarketConfigValue(decoder *binary.Decoder) (UpdateLendingMarketConfigValue, error) {
	{
		tmp := new(updateLendingMarketConfigValueEnumContainer)
		err := decoder.Decode(tmp)
		if err != nil {
			return nil, fmt.Errorf("failed parsing UpdateLendingMarketConfigValue: %w", err)
		}
		switch tmp.Enum {
		case 0:
			return &tmp.Bool, nil
		case 1:
			return &tmp.U8, nil
		case 2:
			return &tmp.U8Array, nil
		case 3:
			return &tmp.U16, nil
		case 4:
			return &tmp.U64, nil
		case 5:
			return &tmp.U128, nil
		case 6:
			return &tmp.Pubkey, nil
		case 7:
			return &tmp.ElevationGroup, nil
		case 8:
			return &tmp.Name, nil
		default:
			return nil, fmt.Errorf("UpdateLendingMarketConfigValue: unknown enum index: %v", tmp.Enum)
		}
	}
}

func EncodeUpdateLendingMarketConfigValue(encoder *binary.Encoder, value UpdateLendingMarketConfigValue) error {
	{
		tmp := updateLendingMarketConfigValueEnumContainer{}
		switch realvalue := value.(type) {
		case *UpdateLendingMarketConfigValue_Bool:
			tmp.Enum = 0
			tmp.Bool = *realvalue
		case *UpdateLendingMarketConfigValue_U8:
			tmp.Enum = 1
			tmp.U8 = *realvalue
		case *UpdateLendingMarketConfigValue_U8Array:
			tmp.Enum = 2
			tmp.U8Array = *realvalue
		case *UpdateLendingMarketConfigValue_U16:
			tmp.Enum = 3
			tmp.U16 = *realvalue
		case *UpdateLendingMarketConfigValue_U64:
			tmp.Enum = 4
			tmp.U64 = *realvalue
		case *UpdateLendingMarketConfigValue_U128:
			tmp.Enum = 5
			tmp.U128 = *realvalue
		case *UpdateLendingMarketConfigValue_Pubkey:
			tmp.Enum = 6
			tmp.Pubkey = *realvalue
		case *UpdateLendingMarketConfigValue_ElevationGroup:
			tmp.Enum = 7
			tmp.ElevationGroup = *realvalue
		case *UpdateLendingMarketConfigValue_Name:
			tmp.Enum = 8
			tmp.Name = *realvalue
		}
		return encoder.Encode(tmp)
	}
}

// Variant "Bool" of enum "UpdateLendingMarketConfigValue"
type UpdateLendingMarketConfigValue_Bool struct {
	V0 bool `json:"v0"`
}

func (obj UpdateLendingMarketConfigValue_Bool) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `V0`:
	err = encoder.Encode(obj.V0)
	if err != nil {
		return errors.NewField("V0", err)
	}
	return nil
}

func (obj UpdateLendingMarketConfigValue_Bool) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding UpdateLendingMarketConfigValue_Bool: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *UpdateLendingMarketConfigValue_Bool) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `V0`:
	err = decoder.Decode(&obj.V0)
	if err != nil {
		return errors.NewField("V0", err)
	}
	return nil
}

func (obj *UpdateLendingMarketConfigValue_Bool) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling UpdateLendingMarketConfigValue_Bool: %w", err)
	}
	return nil
}

func UnmarshalUpdateLendingMarketConfigValue_Bool(buf []byte) (*UpdateLendingMarketConfigValue_Bool, error) {
	obj := new(UpdateLendingMarketConfigValue_Bool)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

func (_ *UpdateLendingMarketConfigValue_Bool) isUpdateLendingMarketConfigValue() {}

// Variant "U8" of enum "UpdateLendingMarketConfigValue"
type UpdateLendingMarketConfigValue_U8 struct {
	V0 uint8 `json:"v0"`
}

func (obj UpdateLendingMarketConfigValue_U8) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `V0`:
	err = encoder.Encode(obj.V0)
	if err != nil {
		return errors.NewField("V0", err)
	}
	return nil
}

func (obj UpdateLendingMarketConfigValue_U8) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding UpdateLendingMarketConfigValue_U8: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *UpdateLendingMarketConfigValue_U8) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `V0`:
	err = decoder.Decode(&obj.V0)
	if err != nil {
		return errors.NewField("V0", err)
	}
	return nil
}

func (obj *UpdateLendingMarketConfigValue_U8) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling UpdateLendingMarketConfigValue_U8: %w", err)
	}
	return nil
}

func UnmarshalUpdateLendingMarketConfigValue_U8(buf []byte) (*UpdateLendingMarketConfigValue_U8, error) {
	obj := new(UpdateLendingMarketConfigValue_U8)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

func (_ *UpdateLendingMarketConfigValue_U8) isUpdateLendingMarketConfigValue() {}

// Variant "U8Array" of enum "UpdateLendingMarketConfigValue"
type UpdateLendingMarketConfigValue_U8Array struct {
	V0 [8]uint8 `json:"v0"`
}

func (obj UpdateLendingMarketConfigValue_U8Array) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `V0`:
	err = encoder.Encode(obj.V0)
	if err != nil {
		return errors.NewField("V0", err)
	}
	return nil
}

func (obj UpdateLendingMarketConfigValue_U8Array) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding UpdateLendingMarketConfigValue_U8Array: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *UpdateLendingMarketConfigValue_U8Array) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `V0`:
	err = decoder.Decode(&obj.V0)
	if err != nil {
		return errors.NewField("V0", err)
	}
	return nil
}

func (obj *UpdateLendingMarketConfigValue_U8Array) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling UpdateLendingMarketConfigValue_U8Array: %w", err)
	}
	return nil
}

func UnmarshalUpdateLendingMarketConfigValue_U8Array(buf []byte) (*UpdateLendingMarketConfigValue_U8Array, error) {
	obj := new(UpdateLendingMarketConfigValue_U8Array)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

func (_ *UpdateLendingMarketConfigValue_U8Array) isUpdateLendingMarketConfigValue() {}

// Variant "U16" of enum "UpdateLendingMarketConfigValue"
type UpdateLendingMarketConfigValue_U16 struct {
	V0 uint16 `json:"v0"`
}

func (obj UpdateLendingMarketConfigValue_U16) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `V0`:
	err = encoder.Encode(obj.V0)
	if err != nil {
		return errors.NewField("V0", err)
	}
	return nil
}

func (obj UpdateLendingMarketConfigValue_U16) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding UpdateLendingMarketConfigValue_U16: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *UpdateLendingMarketConfigValue_U16) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `V0`:
	err = decoder.Decode(&obj.V0)
	if err != nil {
		return errors.NewField("V0", err)
	}
	return nil
}

func (obj *UpdateLendingMarketConfigValue_U16) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling UpdateLendingMarketConfigValue_U16: %w", err)
	}
	return nil
}

func UnmarshalUpdateLendingMarketConfigValue_U16(buf []byte) (*UpdateLendingMarketConfigValue_U16, error) {
	obj := new(UpdateLendingMarketConfigValue_U16)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

func (_ *UpdateLendingMarketConfigValue_U16) isUpdateLendingMarketConfigValue() {}

// Variant "U64" of enum "UpdateLendingMarketConfigValue"
type UpdateLendingMarketConfigValue_U64 struct {
	V0 uint64 `json:"v0"`
}

func (obj UpdateLendingMarketConfigValue_U64) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `V0`:
	err = encoder.Encode(obj.V0)
	if err != nil {
		return errors.NewField("V0", err)
	}
	return nil
}

func (obj UpdateLendingMarketConfigValue_U64) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding UpdateLendingMarketConfigValue_U64: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *UpdateLendingMarketConfigValue_U64) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `V0`:
	err = decoder.Decode(&obj.V0)
	if err != nil {
		return errors.NewField("V0", err)
	}
	return nil
}

func (obj *UpdateLendingMarketConfigValue_U64) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling UpdateLendingMarketConfigValue_U64: %w", err)
	}
	return nil
}

func UnmarshalUpdateLendingMarketConfigValue_U64(buf []byte) (*UpdateLendingMarketConfigValue_U64, error) {
	obj := new(UpdateLendingMarketConfigValue_U64)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

func (_ *UpdateLendingMarketConfigValue_U64) isUpdateLendingMarketConfigValue() {}

// Variant "U128" of enum "UpdateLendingMarketConfigValue"
type UpdateLendingMarketConfigValue_U128 struct {
	V0 binary.Uint128 `json:"v0"`
}

func (obj UpdateLendingMarketConfigValue_U128) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `V0`:
	err = encoder.Encode(obj.V0)
	if err != nil {
		return errors.NewField("V0", err)
	}
	return nil
}

func (obj UpdateLendingMarketConfigValue_U128) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding UpdateLendingMarketConfigValue_U128: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *UpdateLendingMarketConfigValue_U128) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `V0`:
	err = decoder.Decode(&obj.V0)
	if err != nil {
		return errors.NewField("V0", err)
	}
	return nil
}

func (obj *UpdateLendingMarketConfigValue_U128) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling UpdateLendingMarketConfigValue_U128: %w", err)
	}
	return nil
}

func UnmarshalUpdateLendingMarketConfigValue_U128(buf []byte) (*UpdateLendingMarketConfigValue_U128, error) {
	obj := new(UpdateLendingMarketConfigValue_U128)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

func (_ *UpdateLendingMarketConfigValue_U128) isUpdateLendingMarketConfigValue() {}

// Variant "Pubkey" of enum "UpdateLendingMarketConfigValue"
type UpdateLendingMarketConfigValue_Pubkey struct {
	V0 solanago.PublicKey `json:"v0"`
}

func (obj UpdateLendingMarketConfigValue_Pubkey) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `V0`:
	err = encoder.Encode(obj.V0)
	if err != nil {
		return errors.NewField("V0", err)
	}
	return nil
}

func (obj UpdateLendingMarketConfigValue_Pubkey) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding UpdateLendingMarketConfigValue_Pubkey: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *UpdateLendingMarketConfigValue_Pubkey) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `V0`:
	err = decoder.Decode(&obj.V0)
	if err != nil {
		return errors.NewField("V0", err)
	}
	return nil
}

func (obj *UpdateLendingMarketConfigValue_Pubkey) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling UpdateLendingMarketConfigValue_Pubkey: %w", err)
	}
	return nil
}

func UnmarshalUpdateLendingMarketConfigValue_Pubkey(buf []byte) (*UpdateLendingMarketConfigValue_Pubkey, error) {
	obj := new(UpdateLendingMarketConfigValue_Pubkey)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

func (_ *UpdateLendingMarketConfigValue_Pubkey) isUpdateLendingMarketConfigValue() {}

// Variant "ElevationGroup" of enum "UpdateLendingMarketConfigValue"
type UpdateLendingMarketConfigValue_ElevationGroup struct {
	V0 ElevationGroup `json:"v0"`
}

func (obj UpdateLendingMarketConfigValue_ElevationGroup) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `V0`:
	err = encoder.Encode(obj.V0)
	if err != nil {
		return errors.NewField("V0", err)
	}
	return nil
}

func (obj UpdateLendingMarketConfigValue_ElevationGroup) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding UpdateLendingMarketConfigValue_ElevationGroup: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *UpdateLendingMarketConfigValue_ElevationGroup) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `V0`:
	err = decoder.Decode(&obj.V0)
	if err != nil {
		return errors.NewField("V0", err)
	}
	return nil
}

func (obj *UpdateLendingMarketConfigValue_ElevationGroup) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling UpdateLendingMarketConfigValue_ElevationGroup: %w", err)
	}
	return nil
}

func UnmarshalUpdateLendingMarketConfigValue_ElevationGroup(buf []byte) (*UpdateLendingMarketConfigValue_ElevationGroup, error) {
	obj := new(UpdateLendingMarketConfigValue_ElevationGroup)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

func (_ *UpdateLendingMarketConfigValue_ElevationGroup) isUpdateLendingMarketConfigValue() {}

// Variant "Name" of enum "UpdateLendingMarketConfigValue"
type UpdateLendingMarketConfigValue_Name struct {
	V0 [32]uint8 `json:"v0"`
}

func (obj UpdateLendingMarketConfigValue_Name) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `V0`:
	err = encoder.Encode(obj.V0)
	if err != nil {
		return errors.NewField("V0", err)
	}
	return nil
}

func (obj UpdateLendingMarketConfigValue_Name) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding UpdateLendingMarketConfigValue_Name: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *UpdateLendingMarketConfigValue_Name) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `V0`:
	err = decoder.Decode(&obj.V0)
	if err != nil {
		return errors.NewField("V0", err)
	}
	return nil
}

func (obj *UpdateLendingMarketConfigValue_Name) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling UpdateLendingMarketConfigValue_Name: %w", err)
	}
	return nil
}

func UnmarshalUpdateLendingMarketConfigValue_Name(buf []byte) (*UpdateLendingMarketConfigValue_Name, error) {
	obj := new(UpdateLendingMarketConfigValue_Name)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

func (_ *UpdateLendingMarketConfigValue_Name) isUpdateLendingMarketConfigValue() {}

type UpdateLendingMarketMode binary.BorshEnum

const (
	UpdateLendingMarketMode_UpdateOwner UpdateLendingMarketMode = iota
	UpdateLendingMarketMode_UpdateEmergencyMode
	UpdateLendingMarketMode_UpdateLiquidationCloseFactor
	UpdateLendingMarketMode_UpdateLiquidationMaxValue
	UpdateLendingMarketMode_DeprecatedUpdateGlobalUnhealthyBorrow
	UpdateLendingMarketMode_UpdateGlobalAllowedBorrow
	UpdateLendingMarketMode_UpdateRiskCouncil
	UpdateLendingMarketMode_UpdateMinFullLiquidationThreshold
	UpdateLendingMarketMode_UpdateInsolvencyRiskLtv
	UpdateLendingMarketMode_UpdateElevationGroup
	UpdateLendingMarketMode_UpdateReferralFeeBps
	UpdateLendingMarketMode_DeprecatedUpdateMultiplierPoints
	UpdateLendingMarketMode_UpdatePriceRefreshTriggerToMaxAgePct
	UpdateLendingMarketMode_UpdateAutodeleverageEnabled
	UpdateLendingMarketMode_UpdateBorrowingDisabled
	UpdateLendingMarketMode_UpdateMinNetValueObligationPostAction
	UpdateLendingMarketMode_UpdateMinValueLtvSkipPriorityLiqCheck
	UpdateLendingMarketMode_UpdateMinValueBfSkipPriorityLiqCheck
	UpdateLendingMarketMode_UpdatePaddingFields
	UpdateLendingMarketMode_UpdateName
	UpdateLendingMarketMode_UpdateIndividualAutodeleverageMarginCallPeriodSecs
	UpdateLendingMarketMode_UpdateInitialDepositAmount
	UpdateLendingMarketMode_UpdateObligationOrderExecutionEnabled
	UpdateLendingMarketMode_UpdateImmutableFlag
	UpdateLendingMarketMode_UpdateObligationOrderCreationEnabled
)

func (value UpdateLendingMarketMode) String() string {
	switch value {
	case UpdateLendingMarketMode_UpdateOwner:
		return "UpdateOwner"
	case UpdateLendingMarketMode_UpdateEmergencyMode:
		return "UpdateEmergencyMode"
	case UpdateLendingMarketMode_UpdateLiquidationCloseFactor:
		return "UpdateLiquidationCloseFactor"
	case UpdateLendingMarketMode_UpdateLiquidationMaxValue:
		return "UpdateLiquidationMaxValue"
	case UpdateLendingMarketMode_DeprecatedUpdateGlobalUnhealthyBorrow:
		return "DeprecatedUpdateGlobalUnhealthyBorrow"
	case UpdateLendingMarketMode_UpdateGlobalAllowedBorrow:
		return "UpdateGlobalAllowedBorrow"
	case UpdateLendingMarketMode_UpdateRiskCouncil:
		return "UpdateRiskCouncil"
	case UpdateLendingMarketMode_UpdateMinFullLiquidationThreshold:
		return "UpdateMinFullLiquidationThreshold"
	case UpdateLendingMarketMode_UpdateInsolvencyRiskLtv:
		return "UpdateInsolvencyRiskLtv"
	case UpdateLendingMarketMode_UpdateElevationGroup:
		return "UpdateElevationGroup"
	case UpdateLendingMarketMode_UpdateReferralFeeBps:
		return "UpdateReferralFeeBps"
	case UpdateLendingMarketMode_DeprecatedUpdateMultiplierPoints:
		return "DeprecatedUpdateMultiplierPoints"
	case UpdateLendingMarketMode_UpdatePriceRefreshTriggerToMaxAgePct:
		return "UpdatePriceRefreshTriggerToMaxAgePct"
	case UpdateLendingMarketMode_UpdateAutodeleverageEnabled:
		return "UpdateAutodeleverageEnabled"
	case UpdateLendingMarketMode_UpdateBorrowingDisabled:
		return "UpdateBorrowingDisabled"
	case UpdateLendingMarketMode_UpdateMinNetValueObligationPostAction:
		return "UpdateMinNetValueObligationPostAction"
	case UpdateLendingMarketMode_UpdateMinValueLtvSkipPriorityLiqCheck:
		return "UpdateMinValueLtvSkipPriorityLiqCheck"
	case UpdateLendingMarketMode_UpdateMinValueBfSkipPriorityLiqCheck:
		return "UpdateMinValueBfSkipPriorityLiqCheck"
	case UpdateLendingMarketMode_UpdatePaddingFields:
		return "UpdatePaddingFields"
	case UpdateLendingMarketMode_UpdateName:
		return "UpdateName"
	case UpdateLendingMarketMode_UpdateIndividualAutodeleverageMarginCallPeriodSecs:
		return "UpdateIndividualAutodeleverageMarginCallPeriodSecs"
	case UpdateLendingMarketMode_UpdateInitialDepositAmount:
		return "UpdateInitialDepositAmount"
	case UpdateLendingMarketMode_UpdateObligationOrderExecutionEnabled:
		return "UpdateObligationOrderExecutionEnabled"
	case UpdateLendingMarketMode_UpdateImmutableFlag:
		return "UpdateImmutableFlag"
	case UpdateLendingMarketMode_UpdateObligationOrderCreationEnabled:
		return "UpdateObligationOrderCreationEnabled"
	default:
		return ""
	}
}

type UpdateGlobalConfigMode binary.BorshEnum

const (
	UpdateGlobalConfigMode_PendingAdmin UpdateGlobalConfigMode = iota
	UpdateGlobalConfigMode_FeeCollector
)

func (value UpdateGlobalConfigMode) String() string {
	switch value {
	case UpdateGlobalConfigMode_PendingAdmin:
		return "PendingAdmin"
	case UpdateGlobalConfigMode_FeeCollector:
		return "FeeCollector"
	default:
		return ""
	}
}

// Last update state
type LastUpdate struct {
	// Last slot when updated
	Slot uint64 `json:"slot"`

	// True when marked stale, false when slot updated
	Stale uint8 `json:"stale"`

	// Status of the prices used to calculate the last update
	PriceStatus uint8    `json:"priceStatus"`
	Placeholder [6]uint8 `json:"placeholder"`
}

func (obj LastUpdate) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Slot`:
	err = encoder.Encode(obj.Slot)
	if err != nil {
		return errors.NewField("Slot", err)
	}
	// Serialize `Stale`:
	err = encoder.Encode(obj.Stale)
	if err != nil {
		return errors.NewField("Stale", err)
	}
	// Serialize `PriceStatus`:
	err = encoder.Encode(obj.PriceStatus)
	if err != nil {
		return errors.NewField("PriceStatus", err)
	}
	// Serialize `Placeholder`:
	err = encoder.Encode(obj.Placeholder)
	if err != nil {
		return errors.NewField("Placeholder", err)
	}
	return nil
}

func (obj LastUpdate) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding LastUpdate: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *LastUpdate) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Slot`:
	err = decoder.Decode(&obj.Slot)
	if err != nil {
		return errors.NewField("Slot", err)
	}
	// Deserialize `Stale`:
	err = decoder.Decode(&obj.Stale)
	if err != nil {
		return errors.NewField("Stale", err)
	}
	// Deserialize `PriceStatus`:
	err = decoder.Decode(&obj.PriceStatus)
	if err != nil {
		return errors.NewField("PriceStatus", err)
	}
	// Deserialize `Placeholder`:
	err = decoder.Decode(&obj.Placeholder)
	if err != nil {
		return errors.NewField("Placeholder", err)
	}
	return nil
}

func (obj *LastUpdate) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling LastUpdate: %w", err)
	}
	return nil
}

func UnmarshalLastUpdate(buf []byte) (*LastUpdate, error) {
	obj := new(LastUpdate)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type ElevationGroup struct {
	MaxLiquidationBonusBps  uint16 `json:"maxLiquidationBonusBps"`
	Id                      uint8  `json:"id"`
	LtvPct                  uint8  `json:"ltvPct"`
	LiquidationThresholdPct uint8  `json:"liquidationThresholdPct"`
	AllowNewLoans           uint8  `json:"allowNewLoans"`
	MaxReservesAsCollateral uint8  `json:"maxReservesAsCollateral"`
	Padding0                uint8  `json:"padding0"`

	// Mandatory debt reserve for this elevation group
	DebtReserve solanago.PublicKey `json:"debtReserve"`
	Padding1    [4]uint64          `json:"padding1"`
}

func (obj ElevationGroup) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `MaxLiquidationBonusBps`:
	err = encoder.Encode(obj.MaxLiquidationBonusBps)
	if err != nil {
		return errors.NewField("MaxLiquidationBonusBps", err)
	}
	// Serialize `Id`:
	err = encoder.Encode(obj.Id)
	if err != nil {
		return errors.NewField("Id", err)
	}
	// Serialize `LtvPct`:
	err = encoder.Encode(obj.LtvPct)
	if err != nil {
		return errors.NewField("LtvPct", err)
	}
	// Serialize `LiquidationThresholdPct`:
	err = encoder.Encode(obj.LiquidationThresholdPct)
	if err != nil {
		return errors.NewField("LiquidationThresholdPct", err)
	}
	// Serialize `AllowNewLoans`:
	err = encoder.Encode(obj.AllowNewLoans)
	if err != nil {
		return errors.NewField("AllowNewLoans", err)
	}
	// Serialize `MaxReservesAsCollateral`:
	err = encoder.Encode(obj.MaxReservesAsCollateral)
	if err != nil {
		return errors.NewField("MaxReservesAsCollateral", err)
	}
	// Serialize `Padding0`:
	err = encoder.Encode(obj.Padding0)
	if err != nil {
		return errors.NewField("Padding0", err)
	}
	// Serialize `DebtReserve`:
	err = encoder.Encode(obj.DebtReserve)
	if err != nil {
		return errors.NewField("DebtReserve", err)
	}
	// Serialize `Padding1`:
	err = encoder.Encode(obj.Padding1)
	if err != nil {
		return errors.NewField("Padding1", err)
	}
	return nil
}

func (obj ElevationGroup) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding ElevationGroup: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *ElevationGroup) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `MaxLiquidationBonusBps`:
	err = decoder.Decode(&obj.MaxLiquidationBonusBps)
	if err != nil {
		return errors.NewField("MaxLiquidationBonusBps", err)
	}
	// Deserialize `Id`:
	err = decoder.Decode(&obj.Id)
	if err != nil {
		return errors.NewField("Id", err)
	}
	// Deserialize `LtvPct`:
	err = decoder.Decode(&obj.LtvPct)
	if err != nil {
		return errors.NewField("LtvPct", err)
	}
	// Deserialize `LiquidationThresholdPct`:
	err = decoder.Decode(&obj.LiquidationThresholdPct)
	if err != nil {
		return errors.NewField("LiquidationThresholdPct", err)
	}
	// Deserialize `AllowNewLoans`:
	err = decoder.Decode(&obj.AllowNewLoans)
	if err != nil {
		return errors.NewField("AllowNewLoans", err)
	}
	// Deserialize `MaxReservesAsCollateral`:
	err = decoder.Decode(&obj.MaxReservesAsCollateral)
	if err != nil {
		return errors.NewField("MaxReservesAsCollateral", err)
	}
	// Deserialize `Padding0`:
	err = decoder.Decode(&obj.Padding0)
	if err != nil {
		return errors.NewField("Padding0", err)
	}
	// Deserialize `DebtReserve`:
	err = decoder.Decode(&obj.DebtReserve)
	if err != nil {
		return errors.NewField("DebtReserve", err)
	}
	// Deserialize `Padding1`:
	err = decoder.Decode(&obj.Padding1)
	if err != nil {
		return errors.NewField("Padding1", err)
	}
	return nil
}

func (obj *ElevationGroup) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling ElevationGroup: %w", err)
	}
	return nil
}

func UnmarshalElevationGroup(buf []byte) (*ElevationGroup, error) {
	obj := new(ElevationGroup)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type InitObligationArgs struct {
	Tag uint8 `json:"tag"`
	Id  uint8 `json:"id"`
}

func (obj InitObligationArgs) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Tag`:
	err = encoder.Encode(obj.Tag)
	if err != nil {
		return errors.NewField("Tag", err)
	}
	// Serialize `Id`:
	err = encoder.Encode(obj.Id)
	if err != nil {
		return errors.NewField("Id", err)
	}
	return nil
}

func (obj InitObligationArgs) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding InitObligationArgs: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *InitObligationArgs) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Tag`:
	err = decoder.Decode(&obj.Tag)
	if err != nil {
		return errors.NewField("Tag", err)
	}
	// Deserialize `Id`:
	err = decoder.Decode(&obj.Id)
	if err != nil {
		return errors.NewField("Id", err)
	}
	return nil
}

func (obj *InitObligationArgs) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling InitObligationArgs: %w", err)
	}
	return nil
}

func UnmarshalInitObligationArgs(buf []byte) (*InitObligationArgs, error) {
	obj := new(InitObligationArgs)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Obligation collateral state
type ObligationCollateral struct {
	// Reserve collateral is deposited to
	DepositReserve solanago.PublicKey `json:"depositReserve"`

	// Amount of collateral deposited
	DepositedAmount uint64 `json:"depositedAmount"`

	// Collateral market value in quote currency (scaled fraction)
	MarketValueSf binary.Uint128 `json:"marketValueSf"`

	// Debt amount (lamport) taken against this collateral.
	// (only meaningful if this obligation is part of an elevation group, otherwise 0)
	// This is only indicative of the debt computed on the last refresh obligation.
	// If the obligation have multiple collateral this value is the same for all of them.
	BorrowedAmountAgainstThisCollateralInElevationGroup uint64    `json:"borrowedAmountAgainstThisCollateralInElevationGroup"`
	Padding                                             [9]uint64 `json:"padding"`
}

func (obj ObligationCollateral) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `DepositReserve`:
	err = encoder.Encode(obj.DepositReserve)
	if err != nil {
		return errors.NewField("DepositReserve", err)
	}
	// Serialize `DepositedAmount`:
	err = encoder.Encode(obj.DepositedAmount)
	if err != nil {
		return errors.NewField("DepositedAmount", err)
	}
	// Serialize `MarketValueSf`:
	err = encoder.Encode(obj.MarketValueSf)
	if err != nil {
		return errors.NewField("MarketValueSf", err)
	}
	// Serialize `BorrowedAmountAgainstThisCollateralInElevationGroup`:
	err = encoder.Encode(obj.BorrowedAmountAgainstThisCollateralInElevationGroup)
	if err != nil {
		return errors.NewField("BorrowedAmountAgainstThisCollateralInElevationGroup", err)
	}
	// Serialize `Padding`:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj ObligationCollateral) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding ObligationCollateral: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *ObligationCollateral) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `DepositReserve`:
	err = decoder.Decode(&obj.DepositReserve)
	if err != nil {
		return errors.NewField("DepositReserve", err)
	}
	// Deserialize `DepositedAmount`:
	err = decoder.Decode(&obj.DepositedAmount)
	if err != nil {
		return errors.NewField("DepositedAmount", err)
	}
	// Deserialize `MarketValueSf`:
	err = decoder.Decode(&obj.MarketValueSf)
	if err != nil {
		return errors.NewField("MarketValueSf", err)
	}
	// Deserialize `BorrowedAmountAgainstThisCollateralInElevationGroup`:
	err = decoder.Decode(&obj.BorrowedAmountAgainstThisCollateralInElevationGroup)
	if err != nil {
		return errors.NewField("BorrowedAmountAgainstThisCollateralInElevationGroup", err)
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj *ObligationCollateral) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling ObligationCollateral: %w", err)
	}
	return nil
}

func UnmarshalObligationCollateral(buf []byte) (*ObligationCollateral, error) {
	obj := new(ObligationCollateral)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Obligation liquidity state
type ObligationLiquidity struct {
	// Reserve liquidity is borrowed from
	BorrowReserve solanago.PublicKey `json:"borrowReserve"`

	// Borrow rate used for calculating interest (big scaled fraction)
	CumulativeBorrowRateBsf BigFractionBytes `json:"cumulativeBorrowRateBsf"`
	Padding                 uint64           `json:"padding"`

	// Amount of liquidity borrowed plus interest (scaled fraction)
	BorrowedAmountSf binary.Uint128 `json:"borrowedAmountSf"`

	// Liquidity market value in quote currency (scaled fraction)
	MarketValueSf binary.Uint128 `json:"marketValueSf"`

	// Risk adjusted liquidity market value in quote currency - DEBUG ONLY - use market_value instead
	BorrowFactorAdjustedMarketValueSf binary.Uint128 `json:"borrowFactorAdjustedMarketValueSf"`

	// Amount of liquidity borrowed outside of an elevation group
	BorrowedAmountOutsideElevationGroups uint64    `json:"borrowedAmountOutsideElevationGroups"`
	Padding2                             [7]uint64 `json:"padding2"`
}

func (obj ObligationLiquidity) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `BorrowReserve`:
	err = encoder.Encode(obj.BorrowReserve)
	if err != nil {
		return errors.NewField("BorrowReserve", err)
	}
	// Serialize `CumulativeBorrowRateBsf`:
	err = encoder.Encode(obj.CumulativeBorrowRateBsf)
	if err != nil {
		return errors.NewField("CumulativeBorrowRateBsf", err)
	}
	// Serialize `Padding`:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	// Serialize `BorrowedAmountSf`:
	err = encoder.Encode(obj.BorrowedAmountSf)
	if err != nil {
		return errors.NewField("BorrowedAmountSf", err)
	}
	// Serialize `MarketValueSf`:
	err = encoder.Encode(obj.MarketValueSf)
	if err != nil {
		return errors.NewField("MarketValueSf", err)
	}
	// Serialize `BorrowFactorAdjustedMarketValueSf`:
	err = encoder.Encode(obj.BorrowFactorAdjustedMarketValueSf)
	if err != nil {
		return errors.NewField("BorrowFactorAdjustedMarketValueSf", err)
	}
	// Serialize `BorrowedAmountOutsideElevationGroups`:
	err = encoder.Encode(obj.BorrowedAmountOutsideElevationGroups)
	if err != nil {
		return errors.NewField("BorrowedAmountOutsideElevationGroups", err)
	}
	// Serialize `Padding2`:
	err = encoder.Encode(obj.Padding2)
	if err != nil {
		return errors.NewField("Padding2", err)
	}
	return nil
}

func (obj ObligationLiquidity) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding ObligationLiquidity: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *ObligationLiquidity) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `BorrowReserve`:
	err = decoder.Decode(&obj.BorrowReserve)
	if err != nil {
		return errors.NewField("BorrowReserve", err)
	}
	// Deserialize `CumulativeBorrowRateBsf`:
	err = decoder.Decode(&obj.CumulativeBorrowRateBsf)
	if err != nil {
		return errors.NewField("CumulativeBorrowRateBsf", err)
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	// Deserialize `BorrowedAmountSf`:
	err = decoder.Decode(&obj.BorrowedAmountSf)
	if err != nil {
		return errors.NewField("BorrowedAmountSf", err)
	}
	// Deserialize `MarketValueSf`:
	err = decoder.Decode(&obj.MarketValueSf)
	if err != nil {
		return errors.NewField("MarketValueSf", err)
	}
	// Deserialize `BorrowFactorAdjustedMarketValueSf`:
	err = decoder.Decode(&obj.BorrowFactorAdjustedMarketValueSf)
	if err != nil {
		return errors.NewField("BorrowFactorAdjustedMarketValueSf", err)
	}
	// Deserialize `BorrowedAmountOutsideElevationGroups`:
	err = decoder.Decode(&obj.BorrowedAmountOutsideElevationGroups)
	if err != nil {
		return errors.NewField("BorrowedAmountOutsideElevationGroups", err)
	}
	// Deserialize `Padding2`:
	err = decoder.Decode(&obj.Padding2)
	if err != nil {
		return errors.NewField("Padding2", err)
	}
	return nil
}

func (obj *ObligationLiquidity) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling ObligationLiquidity: %w", err)
	}
	return nil
}

func UnmarshalObligationLiquidity(buf []byte) (*ObligationLiquidity, error) {
	obj := new(ObligationLiquidity)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// A single obligation order.
// See [Obligation::orders].
type ObligationOrder struct {
	// A threshold value used by the condition (scaled [Fraction]).
	// The exact meaning depends on the specific [Self::condition_type].
	//
	// Examples:
	// - when `condition_type == 2 (UserLtvBelow)`:
	// then a value of `0.455` here means that the order is active only when the obligation's
	// user LTV is less than `0.455` (i.e. < 45.5%).
	// - when `condition_type == 3 (DebtCollPriceRatioAbove)`:
	// assuming the obligation uses BTC collateral for SOL debt, then a value of `491.3` here
	// means that the order is active only when the BTC-SOL price is greater than `491.3` (i.e.
	// > 491.3 SOL per BTC).
	ConditionThresholdSf binary.Uint128 `json:"conditionThresholdSf"`

	// A configuration parameter used by the opportunity (scaled [Fraction]).
	// The exact meaning depends on the specific [Self::opportunity_type].
	//
	// Examples:
	// - when `opportunity_type == 0 (DeleverageSingleDebtAmount)`:
	// Assuming the obligation uses BTC collateral for SOL debt, then a value of `1_234_000_000`
	// here means that a liquidator may repay up to 1234000000 lamports (i.e. 1.234 SOL) on this
	// obligation.
	// Note: the special value of [Fraction::MAX] is *not* allowed in this case.
	// - when `opportunity_type == 1 (DeleverageAllDebtAmount)`:
	// The only allowed value in this case is [Fraction::MAX] (to emphasize that *all* debt
	// should be repaid).
	OpportunityParameterSf binary.Uint128 `json:"opportunityParameterSf"`

	// A *minimum* additional fraction of collateral transferred to the liquidator, in bps.
	//
	// The minimum bonus is applied exactly when the [Self::condition_threshold_sf] is met, and
	// grows linearly towards the [Self::max_execution_bonus_bps].
	//
	// Example: a value of `50` here means 50bps == 0.5% bonus for an "LTV > 65%" order, when
	// executed precisely at the moment LTV exceeds 65%.
	MinExecutionBonusBps uint16 `json:"minExecutionBonusBps"`

	// A *maximum* additional fraction of collateral transferred to the liquidator, in bps.
	//
	// The maximum bonus is applied at the relevant "extreme" state of the obligation, i.e.:
	// - for a stop-loss condition, it is a point at which the obligation becomes liquidatable;
	// - for a take-profit condition, it is a point at which obligation has 0% LTV.
	//
	// In non-extreme states, the actual bonus value is interpolated linearly, starting from
	// [Self::min_execution_bonus_bps] (at the point specified by the order's condition).
	//
	// Example: a value of `300` here means 300bps == 3.0% bonus for a "debt/coll price > 140"
	// order, when executed at a higher price = 200, at which the obligation's LTV happens to
	// be equal to its liquidation LTV.
	MaxExecutionBonusBps uint16 `json:"maxExecutionBonusBps"`

	// Serialized [ConditionType].
	// The entire order is void when this is zeroed (i.e. representing [ConditionType::Never]).
	//
	// Example: a value of `2` here denotes `UserLtvBelow` condition type. Of course, to
	// interpret this condition, we also need to take the [Self::condition_threshold_sf] into
	// account.
	ConditionType uint8 `json:"conditionType"`

	// Serialized [OpportunityType].
	//
	// Example: a value of `0` here denotes `DeleverageSingleDebtAmount` opportunity. Of course, to
	// interpret this opportunity, we also need to take the [Self::opportunity_parameter_sf] into
	// account.
	OpportunityType uint8 `json:"opportunityType"`

	// Internal padding.
	// The fields above take up 2+2+1+1 bytes = 48 bits, which means we need 80 bits = 10 bytes to
	// align with `u128`s.
	Padding1 [10]uint8 `json:"padding1"`

	// End padding.
	// The total size of a single instance is 8*u128 = 128 bytes.
	Padding2 [5]binary.Uint128 `json:"padding2"`
}

func (obj ObligationOrder) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `ConditionThresholdSf`:
	err = encoder.Encode(obj.ConditionThresholdSf)
	if err != nil {
		return errors.NewField("ConditionThresholdSf", err)
	}
	// Serialize `OpportunityParameterSf`:
	err = encoder.Encode(obj.OpportunityParameterSf)
	if err != nil {
		return errors.NewField("OpportunityParameterSf", err)
	}
	// Serialize `MinExecutionBonusBps`:
	err = encoder.Encode(obj.MinExecutionBonusBps)
	if err != nil {
		return errors.NewField("MinExecutionBonusBps", err)
	}
	// Serialize `MaxExecutionBonusBps`:
	err = encoder.Encode(obj.MaxExecutionBonusBps)
	if err != nil {
		return errors.NewField("MaxExecutionBonusBps", err)
	}
	// Serialize `ConditionType`:
	err = encoder.Encode(obj.ConditionType)
	if err != nil {
		return errors.NewField("ConditionType", err)
	}
	// Serialize `OpportunityType`:
	err = encoder.Encode(obj.OpportunityType)
	if err != nil {
		return errors.NewField("OpportunityType", err)
	}
	// Serialize `Padding1`:
	err = encoder.Encode(obj.Padding1)
	if err != nil {
		return errors.NewField("Padding1", err)
	}
	// Serialize `Padding2`:
	err = encoder.Encode(obj.Padding2)
	if err != nil {
		return errors.NewField("Padding2", err)
	}
	return nil
}

func (obj ObligationOrder) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding ObligationOrder: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *ObligationOrder) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `ConditionThresholdSf`:
	err = decoder.Decode(&obj.ConditionThresholdSf)
	if err != nil {
		return errors.NewField("ConditionThresholdSf", err)
	}
	// Deserialize `OpportunityParameterSf`:
	err = decoder.Decode(&obj.OpportunityParameterSf)
	if err != nil {
		return errors.NewField("OpportunityParameterSf", err)
	}
	// Deserialize `MinExecutionBonusBps`:
	err = decoder.Decode(&obj.MinExecutionBonusBps)
	if err != nil {
		return errors.NewField("MinExecutionBonusBps", err)
	}
	// Deserialize `MaxExecutionBonusBps`:
	err = decoder.Decode(&obj.MaxExecutionBonusBps)
	if err != nil {
		return errors.NewField("MaxExecutionBonusBps", err)
	}
	// Deserialize `ConditionType`:
	err = decoder.Decode(&obj.ConditionType)
	if err != nil {
		return errors.NewField("ConditionType", err)
	}
	// Deserialize `OpportunityType`:
	err = decoder.Decode(&obj.OpportunityType)
	if err != nil {
		return errors.NewField("OpportunityType", err)
	}
	// Deserialize `Padding1`:
	err = decoder.Decode(&obj.Padding1)
	if err != nil {
		return errors.NewField("Padding1", err)
	}
	// Deserialize `Padding2`:
	err = decoder.Decode(&obj.Padding2)
	if err != nil {
		return errors.NewField("Padding2", err)
	}
	return nil
}

func (obj *ObligationOrder) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling ObligationOrder: %w", err)
	}
	return nil
}

func UnmarshalObligationOrder(buf []byte) (*ObligationOrder, error) {
	obj := new(ObligationOrder)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type AssetTier binary.BorshEnum

const (
	AssetTier_Regular AssetTier = iota
	AssetTier_IsolatedCollateral
	AssetTier_IsolatedDebt
)

func (value AssetTier) String() string {
	switch value {
	case AssetTier_Regular:
		return "Regular"
	case AssetTier_IsolatedCollateral:
		return "IsolatedCollateral"
	case AssetTier_IsolatedDebt:
		return "IsolatedDebt"
	default:
		return ""
	}
}

type BigFractionBytes struct {
	Value   [4]uint64 `json:"value"`
	Padding [2]uint64 `json:"padding"`
}

func (obj BigFractionBytes) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Value`:
	err = encoder.Encode(obj.Value)
	if err != nil {
		return errors.NewField("Value", err)
	}
	// Serialize `Padding`:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj BigFractionBytes) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding BigFractionBytes: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *BigFractionBytes) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Value`:
	err = decoder.Decode(&obj.Value)
	if err != nil {
		return errors.NewField("Value", err)
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj *BigFractionBytes) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling BigFractionBytes: %w", err)
	}
	return nil
}

func UnmarshalBigFractionBytes(buf []byte) (*BigFractionBytes, error) {
	obj := new(BigFractionBytes)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Calculate fees exlusive or inclusive of an amount
type FeeCalculation binary.BorshEnum

const (
	FeeCalculation_Exclusive FeeCalculation = iota
	FeeCalculation_Inclusive
)

func (value FeeCalculation) String() string {
	switch value {
	case FeeCalculation_Exclusive:
		return "Exclusive"
	case FeeCalculation_Inclusive:
		return "Inclusive"
	default:
		return ""
	}
}

// Reserve collateral
type ReserveCollateral struct {
	// Reserve collateral mint address
	MintPubkey solanago.PublicKey `json:"mintPubkey"`

	// Reserve collateral mint supply, used for exchange rate
	MintTotalSupply uint64 `json:"mintTotalSupply"`

	// Reserve collateral supply address
	SupplyVault solanago.PublicKey `json:"supplyVault"`
	Padding1    [32]binary.Uint128 `json:"padding1"`
	Padding2    [32]binary.Uint128 `json:"padding2"`
}

func (obj ReserveCollateral) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `MintPubkey`:
	err = encoder.Encode(obj.MintPubkey)
	if err != nil {
		return errors.NewField("MintPubkey", err)
	}
	// Serialize `MintTotalSupply`:
	err = encoder.Encode(obj.MintTotalSupply)
	if err != nil {
		return errors.NewField("MintTotalSupply", err)
	}
	// Serialize `SupplyVault`:
	err = encoder.Encode(obj.SupplyVault)
	if err != nil {
		return errors.NewField("SupplyVault", err)
	}
	// Serialize `Padding1`:
	err = encoder.Encode(obj.Padding1)
	if err != nil {
		return errors.NewField("Padding1", err)
	}
	// Serialize `Padding2`:
	err = encoder.Encode(obj.Padding2)
	if err != nil {
		return errors.NewField("Padding2", err)
	}
	return nil
}

func (obj ReserveCollateral) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding ReserveCollateral: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *ReserveCollateral) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `MintPubkey`:
	err = decoder.Decode(&obj.MintPubkey)
	if err != nil {
		return errors.NewField("MintPubkey", err)
	}
	// Deserialize `MintTotalSupply`:
	err = decoder.Decode(&obj.MintTotalSupply)
	if err != nil {
		return errors.NewField("MintTotalSupply", err)
	}
	// Deserialize `SupplyVault`:
	err = decoder.Decode(&obj.SupplyVault)
	if err != nil {
		return errors.NewField("SupplyVault", err)
	}
	// Deserialize `Padding1`:
	err = decoder.Decode(&obj.Padding1)
	if err != nil {
		return errors.NewField("Padding1", err)
	}
	// Deserialize `Padding2`:
	err = decoder.Decode(&obj.Padding2)
	if err != nil {
		return errors.NewField("Padding2", err)
	}
	return nil
}

func (obj *ReserveCollateral) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling ReserveCollateral: %w", err)
	}
	return nil
}

func UnmarshalReserveCollateral(buf []byte) (*ReserveCollateral, error) {
	obj := new(ReserveCollateral)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Reserve configuration values
type ReserveConfig struct {
	// Status of the reserve Active/Obsolete/Hidden
	Status uint8 `json:"status"`

	// Asset tier -> 0 - regular (collateral & debt), 1 - isolated collateral, 2 - isolated debt
	AssetTier uint8 `json:"assetTier"`

	// Flat rate that goes to the host
	HostFixedInterestRateBps uint16 `json:"hostFixedInterestRateBps"`

	// [DEPRECATED] Space that used to hold 2 fields:
	// - Boost for side (debt or collateral)
	// - Reward points multiplier per obligation type
	// Can be re-used after making sure all underlying production account data is zeroed.
	Reserved2 [9]uint8 `json:"reserved2"`

	// Cut of the order execution bonus that the protocol receives, as a percentage
	ProtocolOrderExecutionFeePct uint8 `json:"protocolOrderExecutionFeePct"`

	// Protocol take rate is the amount borrowed interest protocol receives, as a percentage
	ProtocolTakeRatePct uint8 `json:"protocolTakeRatePct"`

	// Cut of the liquidation bonus that the protocol receives, as a percentage
	ProtocolLiquidationFeePct uint8 `json:"protocolLiquidationFeePct"`

	// Target ratio of the value of borrows to deposits, as a percentage
	// 0 if use as collateral is disabled
	LoanToValuePct uint8 `json:"loanToValuePct"`

	// Loan to value ratio at which an obligation can be liquidated, as percentage
	LiquidationThresholdPct uint8 `json:"liquidationThresholdPct"`

	// Minimum bonus a liquidator receives when repaying part of an unhealthy obligation, as bps
	MinLiquidationBonusBps uint16 `json:"minLiquidationBonusBps"`

	// Maximum bonus a liquidator receives when repaying part of an unhealthy obligation, as bps
	MaxLiquidationBonusBps uint16 `json:"maxLiquidationBonusBps"`

	// Bad debt liquidation bonus for an undercollateralized obligation, as bps
	BadDebtLiquidationBonusBps uint16 `json:"badDebtLiquidationBonusBps"`

	// Time in seconds that must pass before redemptions are enabled after the deposit limit is
	// crossed.
	// Only relevant when `autodeleverage_enabled == 1`, and must not be 0 in such case.
	DeleveragingMarginCallPeriodSecs uint64 `json:"deleveragingMarginCallPeriodSecs"`

	// The rate at which the deleveraging threshold decreases, in bps per day.
	// Only relevant when `autodeleverage_enabled == 1`, and must not be 0 in such case.
	DeleveragingThresholdDecreaseBpsPerDay uint64 `json:"deleveragingThresholdDecreaseBpsPerDay"`

	// Program owner fees assessed, separate from gains due to interest accrual
	Fees ReserveFees `json:"fees"`

	// Borrow rate curve based on utilization
	BorrowRateCurve BorrowRateCurve `json:"borrowRateCurve"`

	// Borrow factor in percentage - used for risk adjustment
	BorrowFactorPct uint64 `json:"borrowFactorPct"`

	// Maximum deposit limit of liquidity in native units, u64::MAX for inf
	DepositLimit uint64 `json:"depositLimit"`

	// Maximum amount borrowed, u64::MAX for inf, 0 to disable borrows (protected deposits)
	BorrowLimit uint64 `json:"borrowLimit"`

	// Token id from TokenInfos struct
	TokenInfo TokenInfo `json:"tokenInfo"`

	// Deposit withdrawal caps - deposit & redeem
	DepositWithdrawalCap WithdrawalCaps `json:"depositWithdrawalCap"`

	// Debt withdrawal caps - borrow & repay
	DebtWithdrawalCap              WithdrawalCaps `json:"debtWithdrawalCap"`
	ElevationGroups                [20]uint8      `json:"elevationGroups"`
	DisableUsageAsCollOutsideEmode uint8          `json:"disableUsageAsCollOutsideEmode"`

	// Utilization (in percentage) above which borrowing is blocked. 0 to disable.
	UtilizationLimitBlockBorrowingAbovePct uint8 `json:"utilizationLimitBlockBorrowingAbovePct"`

	// Whether this reserve should be subject to auto-deleveraging after deposit or borrow limit is
	// crossed.
	// Besides this flag, the lending market's flag also needs to be enabled (logical `AND`).
	// **NOTE:** the manual "target LTV" deleveraging (enabled by the risk council for individual
	// obligations) is NOT affected by this flag.
	AutodeleverageEnabled uint8    `json:"autodeleverageEnabled"`
	Reserved1             [1]uint8 `json:"reserved1"`

	// Maximum amount liquidity of this reserve borrowed outside all elevation groups
	// - u64::MAX for inf
	// - 0 to disable borrows outside elevation groups
	BorrowLimitOutsideElevationGroup uint64 `json:"borrowLimitOutsideElevationGroup"`

	// Defines the maximum amount (in lamports of elevation group debt asset)
	// that can be borrowed when this reserve is used as collateral.
	// - u64::MAX for inf
	// - 0 to disable borrows in this elevation group (expected value for the debt asset)
	BorrowLimitAgainstThisCollateralInElevationGroup [32]uint64 `json:"borrowLimitAgainstThisCollateralInElevationGroup"`

	// The rate at which the deleveraging-related liquidation bonus increases, in bps per day.
	// Only relevant when `autodeleverage_enabled == 1`, and must not be 0 in such case.
	DeleveragingBonusIncreaseBpsPerDay uint64 `json:"deleveragingBonusIncreaseBpsPerDay"`
}

func (obj ReserveConfig) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Status`:
	err = encoder.Encode(obj.Status)
	if err != nil {
		return errors.NewField("Status", err)
	}
	// Serialize `AssetTier`:
	err = encoder.Encode(obj.AssetTier)
	if err != nil {
		return errors.NewField("AssetTier", err)
	}
	// Serialize `HostFixedInterestRateBps`:
	err = encoder.Encode(obj.HostFixedInterestRateBps)
	if err != nil {
		return errors.NewField("HostFixedInterestRateBps", err)
	}
	// Serialize `Reserved2`:
	err = encoder.Encode(obj.Reserved2)
	if err != nil {
		return errors.NewField("Reserved2", err)
	}
	// Serialize `ProtocolOrderExecutionFeePct`:
	err = encoder.Encode(obj.ProtocolOrderExecutionFeePct)
	if err != nil {
		return errors.NewField("ProtocolOrderExecutionFeePct", err)
	}
	// Serialize `ProtocolTakeRatePct`:
	err = encoder.Encode(obj.ProtocolTakeRatePct)
	if err != nil {
		return errors.NewField("ProtocolTakeRatePct", err)
	}
	// Serialize `ProtocolLiquidationFeePct`:
	err = encoder.Encode(obj.ProtocolLiquidationFeePct)
	if err != nil {
		return errors.NewField("ProtocolLiquidationFeePct", err)
	}
	// Serialize `LoanToValuePct`:
	err = encoder.Encode(obj.LoanToValuePct)
	if err != nil {
		return errors.NewField("LoanToValuePct", err)
	}
	// Serialize `LiquidationThresholdPct`:
	err = encoder.Encode(obj.LiquidationThresholdPct)
	if err != nil {
		return errors.NewField("LiquidationThresholdPct", err)
	}
	// Serialize `MinLiquidationBonusBps`:
	err = encoder.Encode(obj.MinLiquidationBonusBps)
	if err != nil {
		return errors.NewField("MinLiquidationBonusBps", err)
	}
	// Serialize `MaxLiquidationBonusBps`:
	err = encoder.Encode(obj.MaxLiquidationBonusBps)
	if err != nil {
		return errors.NewField("MaxLiquidationBonusBps", err)
	}
	// Serialize `BadDebtLiquidationBonusBps`:
	err = encoder.Encode(obj.BadDebtLiquidationBonusBps)
	if err != nil {
		return errors.NewField("BadDebtLiquidationBonusBps", err)
	}
	// Serialize `DeleveragingMarginCallPeriodSecs`:
	err = encoder.Encode(obj.DeleveragingMarginCallPeriodSecs)
	if err != nil {
		return errors.NewField("DeleveragingMarginCallPeriodSecs", err)
	}
	// Serialize `DeleveragingThresholdDecreaseBpsPerDay`:
	err = encoder.Encode(obj.DeleveragingThresholdDecreaseBpsPerDay)
	if err != nil {
		return errors.NewField("DeleveragingThresholdDecreaseBpsPerDay", err)
	}
	// Serialize `Fees`:
	err = encoder.Encode(obj.Fees)
	if err != nil {
		return errors.NewField("Fees", err)
	}
	// Serialize `BorrowRateCurve`:
	err = encoder.Encode(obj.BorrowRateCurve)
	if err != nil {
		return errors.NewField("BorrowRateCurve", err)
	}
	// Serialize `BorrowFactorPct`:
	err = encoder.Encode(obj.BorrowFactorPct)
	if err != nil {
		return errors.NewField("BorrowFactorPct", err)
	}
	// Serialize `DepositLimit`:
	err = encoder.Encode(obj.DepositLimit)
	if err != nil {
		return errors.NewField("DepositLimit", err)
	}
	// Serialize `BorrowLimit`:
	err = encoder.Encode(obj.BorrowLimit)
	if err != nil {
		return errors.NewField("BorrowLimit", err)
	}
	// Serialize `TokenInfo`:
	err = encoder.Encode(obj.TokenInfo)
	if err != nil {
		return errors.NewField("TokenInfo", err)
	}
	// Serialize `DepositWithdrawalCap`:
	err = encoder.Encode(obj.DepositWithdrawalCap)
	if err != nil {
		return errors.NewField("DepositWithdrawalCap", err)
	}
	// Serialize `DebtWithdrawalCap`:
	err = encoder.Encode(obj.DebtWithdrawalCap)
	if err != nil {
		return errors.NewField("DebtWithdrawalCap", err)
	}
	// Serialize `ElevationGroups`:
	err = encoder.Encode(obj.ElevationGroups)
	if err != nil {
		return errors.NewField("ElevationGroups", err)
	}
	// Serialize `DisableUsageAsCollOutsideEmode`:
	err = encoder.Encode(obj.DisableUsageAsCollOutsideEmode)
	if err != nil {
		return errors.NewField("DisableUsageAsCollOutsideEmode", err)
	}
	// Serialize `UtilizationLimitBlockBorrowingAbovePct`:
	err = encoder.Encode(obj.UtilizationLimitBlockBorrowingAbovePct)
	if err != nil {
		return errors.NewField("UtilizationLimitBlockBorrowingAbovePct", err)
	}
	// Serialize `AutodeleverageEnabled`:
	err = encoder.Encode(obj.AutodeleverageEnabled)
	if err != nil {
		return errors.NewField("AutodeleverageEnabled", err)
	}
	// Serialize `Reserved1`:
	err = encoder.Encode(obj.Reserved1)
	if err != nil {
		return errors.NewField("Reserved1", err)
	}
	// Serialize `BorrowLimitOutsideElevationGroup`:
	err = encoder.Encode(obj.BorrowLimitOutsideElevationGroup)
	if err != nil {
		return errors.NewField("BorrowLimitOutsideElevationGroup", err)
	}
	// Serialize `BorrowLimitAgainstThisCollateralInElevationGroup`:
	err = encoder.Encode(obj.BorrowLimitAgainstThisCollateralInElevationGroup)
	if err != nil {
		return errors.NewField("BorrowLimitAgainstThisCollateralInElevationGroup", err)
	}
	// Serialize `DeleveragingBonusIncreaseBpsPerDay`:
	err = encoder.Encode(obj.DeleveragingBonusIncreaseBpsPerDay)
	if err != nil {
		return errors.NewField("DeleveragingBonusIncreaseBpsPerDay", err)
	}
	return nil
}

func (obj ReserveConfig) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding ReserveConfig: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *ReserveConfig) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Status`:
	err = decoder.Decode(&obj.Status)
	if err != nil {
		return errors.NewField("Status", err)
	}
	// Deserialize `AssetTier`:
	err = decoder.Decode(&obj.AssetTier)
	if err != nil {
		return errors.NewField("AssetTier", err)
	}
	// Deserialize `HostFixedInterestRateBps`:
	err = decoder.Decode(&obj.HostFixedInterestRateBps)
	if err != nil {
		return errors.NewField("HostFixedInterestRateBps", err)
	}
	// Deserialize `Reserved2`:
	err = decoder.Decode(&obj.Reserved2)
	if err != nil {
		return errors.NewField("Reserved2", err)
	}
	// Deserialize `ProtocolOrderExecutionFeePct`:
	err = decoder.Decode(&obj.ProtocolOrderExecutionFeePct)
	if err != nil {
		return errors.NewField("ProtocolOrderExecutionFeePct", err)
	}
	// Deserialize `ProtocolTakeRatePct`:
	err = decoder.Decode(&obj.ProtocolTakeRatePct)
	if err != nil {
		return errors.NewField("ProtocolTakeRatePct", err)
	}
	// Deserialize `ProtocolLiquidationFeePct`:
	err = decoder.Decode(&obj.ProtocolLiquidationFeePct)
	if err != nil {
		return errors.NewField("ProtocolLiquidationFeePct", err)
	}
	// Deserialize `LoanToValuePct`:
	err = decoder.Decode(&obj.LoanToValuePct)
	if err != nil {
		return errors.NewField("LoanToValuePct", err)
	}
	// Deserialize `LiquidationThresholdPct`:
	err = decoder.Decode(&obj.LiquidationThresholdPct)
	if err != nil {
		return errors.NewField("LiquidationThresholdPct", err)
	}
	// Deserialize `MinLiquidationBonusBps`:
	err = decoder.Decode(&obj.MinLiquidationBonusBps)
	if err != nil {
		return errors.NewField("MinLiquidationBonusBps", err)
	}
	// Deserialize `MaxLiquidationBonusBps`:
	err = decoder.Decode(&obj.MaxLiquidationBonusBps)
	if err != nil {
		return errors.NewField("MaxLiquidationBonusBps", err)
	}
	// Deserialize `BadDebtLiquidationBonusBps`:
	err = decoder.Decode(&obj.BadDebtLiquidationBonusBps)
	if err != nil {
		return errors.NewField("BadDebtLiquidationBonusBps", err)
	}
	// Deserialize `DeleveragingMarginCallPeriodSecs`:
	err = decoder.Decode(&obj.DeleveragingMarginCallPeriodSecs)
	if err != nil {
		return errors.NewField("DeleveragingMarginCallPeriodSecs", err)
	}
	// Deserialize `DeleveragingThresholdDecreaseBpsPerDay`:
	err = decoder.Decode(&obj.DeleveragingThresholdDecreaseBpsPerDay)
	if err != nil {
		return errors.NewField("DeleveragingThresholdDecreaseBpsPerDay", err)
	}
	// Deserialize `Fees`:
	err = decoder.Decode(&obj.Fees)
	if err != nil {
		return errors.NewField("Fees", err)
	}
	// Deserialize `BorrowRateCurve`:
	err = decoder.Decode(&obj.BorrowRateCurve)
	if err != nil {
		return errors.NewField("BorrowRateCurve", err)
	}
	// Deserialize `BorrowFactorPct`:
	err = decoder.Decode(&obj.BorrowFactorPct)
	if err != nil {
		return errors.NewField("BorrowFactorPct", err)
	}
	// Deserialize `DepositLimit`:
	err = decoder.Decode(&obj.DepositLimit)
	if err != nil {
		return errors.NewField("DepositLimit", err)
	}
	// Deserialize `BorrowLimit`:
	err = decoder.Decode(&obj.BorrowLimit)
	if err != nil {
		return errors.NewField("BorrowLimit", err)
	}
	// Deserialize `TokenInfo`:
	err = decoder.Decode(&obj.TokenInfo)
	if err != nil {
		return errors.NewField("TokenInfo", err)
	}
	// Deserialize `DepositWithdrawalCap`:
	err = decoder.Decode(&obj.DepositWithdrawalCap)
	if err != nil {
		return errors.NewField("DepositWithdrawalCap", err)
	}
	// Deserialize `DebtWithdrawalCap`:
	err = decoder.Decode(&obj.DebtWithdrawalCap)
	if err != nil {
		return errors.NewField("DebtWithdrawalCap", err)
	}
	// Deserialize `ElevationGroups`:
	err = decoder.Decode(&obj.ElevationGroups)
	if err != nil {
		return errors.NewField("ElevationGroups", err)
	}
	// Deserialize `DisableUsageAsCollOutsideEmode`:
	err = decoder.Decode(&obj.DisableUsageAsCollOutsideEmode)
	if err != nil {
		return errors.NewField("DisableUsageAsCollOutsideEmode", err)
	}
	// Deserialize `UtilizationLimitBlockBorrowingAbovePct`:
	err = decoder.Decode(&obj.UtilizationLimitBlockBorrowingAbovePct)
	if err != nil {
		return errors.NewField("UtilizationLimitBlockBorrowingAbovePct", err)
	}
	// Deserialize `AutodeleverageEnabled`:
	err = decoder.Decode(&obj.AutodeleverageEnabled)
	if err != nil {
		return errors.NewField("AutodeleverageEnabled", err)
	}
	// Deserialize `Reserved1`:
	err = decoder.Decode(&obj.Reserved1)
	if err != nil {
		return errors.NewField("Reserved1", err)
	}
	// Deserialize `BorrowLimitOutsideElevationGroup`:
	err = decoder.Decode(&obj.BorrowLimitOutsideElevationGroup)
	if err != nil {
		return errors.NewField("BorrowLimitOutsideElevationGroup", err)
	}
	// Deserialize `BorrowLimitAgainstThisCollateralInElevationGroup`:
	err = decoder.Decode(&obj.BorrowLimitAgainstThisCollateralInElevationGroup)
	if err != nil {
		return errors.NewField("BorrowLimitAgainstThisCollateralInElevationGroup", err)
	}
	// Deserialize `DeleveragingBonusIncreaseBpsPerDay`:
	err = decoder.Decode(&obj.DeleveragingBonusIncreaseBpsPerDay)
	if err != nil {
		return errors.NewField("DeleveragingBonusIncreaseBpsPerDay", err)
	}
	return nil
}

func (obj *ReserveConfig) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling ReserveConfig: %w", err)
	}
	return nil
}

func UnmarshalReserveConfig(buf []byte) (*ReserveConfig, error) {
	obj := new(ReserveConfig)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type ReserveFarmKind binary.BorshEnum

const (
	ReserveFarmKind_Collateral ReserveFarmKind = iota
	ReserveFarmKind_Debt
)

func (value ReserveFarmKind) String() string {
	switch value {
	case ReserveFarmKind_Collateral:
		return "Collateral"
	case ReserveFarmKind_Debt:
		return "Debt"
	default:
		return ""
	}
}

// Additional fee information on a reserve
//
// These exist separately from interest accrual fees, and are specifically for the program owner
// and referral fee. The fees are paid out as a percentage of liquidity token amounts during
// repayments and liquidations.
type ReserveFees struct {
	// Fee assessed on `BorrowObligationLiquidity`, as scaled fraction (60 bits fractional part)
	// Must be between `0` and `2^60`, such that `2^60 = 1`.  A few examples for
	// clarity:
	// 1% = (1 << 60) / 100 = 11529215046068470
	// 0.01% (1 basis point) = 115292150460685
	// 0.00001% (Aave borrow fee) = 115292150461
	BorrowFeeSf uint64 `json:"borrowFeeSf"`

	// Fee for flash loan, expressed as scaled fraction.
	// 0.3% (Aave flash loan fee) = 0.003 * 2^60 = 3458764513820541
	FlashLoanFeeSf uint64 `json:"flashLoanFeeSf"`

	// Used for allignment
	Padding [8]uint8 `json:"padding"`
}

func (obj ReserveFees) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `BorrowFeeSf`:
	err = encoder.Encode(obj.BorrowFeeSf)
	if err != nil {
		return errors.NewField("BorrowFeeSf", err)
	}
	// Serialize `FlashLoanFeeSf`:
	err = encoder.Encode(obj.FlashLoanFeeSf)
	if err != nil {
		return errors.NewField("FlashLoanFeeSf", err)
	}
	// Serialize `Padding`:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj ReserveFees) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding ReserveFees: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *ReserveFees) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `BorrowFeeSf`:
	err = decoder.Decode(&obj.BorrowFeeSf)
	if err != nil {
		return errors.NewField("BorrowFeeSf", err)
	}
	// Deserialize `FlashLoanFeeSf`:
	err = decoder.Decode(&obj.FlashLoanFeeSf)
	if err != nil {
		return errors.NewField("FlashLoanFeeSf", err)
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj *ReserveFees) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling ReserveFees: %w", err)
	}
	return nil
}

func UnmarshalReserveFees(buf []byte) (*ReserveFees, error) {
	obj := new(ReserveFees)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Reserve liquidity
type ReserveLiquidity struct {
	// Reserve liquidity mint address
	MintPubkey solanago.PublicKey `json:"mintPubkey"`

	// Reserve liquidity supply address
	SupplyVault solanago.PublicKey `json:"supplyVault"`

	// Reserve liquidity fee collection address
	FeeVault solanago.PublicKey `json:"feeVault"`

	// Reserve liquidity available
	AvailableAmount uint64 `json:"availableAmount"`

	// Reserve liquidity borrowed (scaled fraction)
	BorrowedAmountSf binary.Uint128 `json:"borrowedAmountSf"`

	// Reserve liquidity market price in quote currency (scaled fraction)
	MarketPriceSf binary.Uint128 `json:"marketPriceSf"`

	// Unix timestamp of the market price (from the oracle)
	MarketPriceLastUpdatedTs uint64 `json:"marketPriceLastUpdatedTs"`

	// Reserve liquidity mint decimals
	MintDecimals uint64 `json:"mintDecimals"`

	// Timestamp when the last refresh reserve detected that the liquidity amount is above the deposit cap. When this threshold is crossed, then redemptions (auto-deleverage) are enabled.
	// If the threshold is not crossed, then the timestamp is set to 0
	DepositLimitCrossedTimestamp uint64 `json:"depositLimitCrossedTimestamp"`

	// Timestamp when the last refresh reserve detected that the borrowed amount is above the borrow cap. When this threshold is crossed, then redemptions (auto-deleverage) are enabled.
	// If the threshold is not crossed, then the timestamp is set to 0
	BorrowLimitCrossedTimestamp uint64 `json:"borrowLimitCrossedTimestamp"`

	// Reserve liquidity cumulative borrow rate (scaled fraction)
	CumulativeBorrowRateBsf BigFractionBytes `json:"cumulativeBorrowRateBsf"`

	// Reserve cumulative protocol fees (scaled fraction)
	AccumulatedProtocolFeesSf binary.Uint128 `json:"accumulatedProtocolFeesSf"`

	// Reserve cumulative referrer fees (scaled fraction)
	AccumulatedReferrerFeesSf binary.Uint128 `json:"accumulatedReferrerFeesSf"`

	// Reserve pending referrer fees, to be claimed in refresh_obligation by referrer or protocol (scaled fraction)
	PendingReferrerFeesSf binary.Uint128 `json:"pendingReferrerFeesSf"`

	// Reserve referrer fee absolute rate calculated at each refresh_reserve operation (scaled fraction)
	AbsoluteReferralRateSf binary.Uint128 `json:"absoluteReferralRateSf"`

	// Token program of the liquidity mint
	TokenProgram solanago.PublicKey `json:"tokenProgram"`
	Padding2     [51]uint64         `json:"padding2"`
	Padding3     [32]binary.Uint128 `json:"padding3"`
}

func (obj ReserveLiquidity) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `MintPubkey`:
	err = encoder.Encode(obj.MintPubkey)
	if err != nil {
		return errors.NewField("MintPubkey", err)
	}
	// Serialize `SupplyVault`:
	err = encoder.Encode(obj.SupplyVault)
	if err != nil {
		return errors.NewField("SupplyVault", err)
	}
	// Serialize `FeeVault`:
	err = encoder.Encode(obj.FeeVault)
	if err != nil {
		return errors.NewField("FeeVault", err)
	}
	// Serialize `AvailableAmount`:
	err = encoder.Encode(obj.AvailableAmount)
	if err != nil {
		return errors.NewField("AvailableAmount", err)
	}
	// Serialize `BorrowedAmountSf`:
	err = encoder.Encode(obj.BorrowedAmountSf)
	if err != nil {
		return errors.NewField("BorrowedAmountSf", err)
	}
	// Serialize `MarketPriceSf`:
	err = encoder.Encode(obj.MarketPriceSf)
	if err != nil {
		return errors.NewField("MarketPriceSf", err)
	}
	// Serialize `MarketPriceLastUpdatedTs`:
	err = encoder.Encode(obj.MarketPriceLastUpdatedTs)
	if err != nil {
		return errors.NewField("MarketPriceLastUpdatedTs", err)
	}
	// Serialize `MintDecimals`:
	err = encoder.Encode(obj.MintDecimals)
	if err != nil {
		return errors.NewField("MintDecimals", err)
	}
	// Serialize `DepositLimitCrossedTimestamp`:
	err = encoder.Encode(obj.DepositLimitCrossedTimestamp)
	if err != nil {
		return errors.NewField("DepositLimitCrossedTimestamp", err)
	}
	// Serialize `BorrowLimitCrossedTimestamp`:
	err = encoder.Encode(obj.BorrowLimitCrossedTimestamp)
	if err != nil {
		return errors.NewField("BorrowLimitCrossedTimestamp", err)
	}
	// Serialize `CumulativeBorrowRateBsf`:
	err = encoder.Encode(obj.CumulativeBorrowRateBsf)
	if err != nil {
		return errors.NewField("CumulativeBorrowRateBsf", err)
	}
	// Serialize `AccumulatedProtocolFeesSf`:
	err = encoder.Encode(obj.AccumulatedProtocolFeesSf)
	if err != nil {
		return errors.NewField("AccumulatedProtocolFeesSf", err)
	}
	// Serialize `AccumulatedReferrerFeesSf`:
	err = encoder.Encode(obj.AccumulatedReferrerFeesSf)
	if err != nil {
		return errors.NewField("AccumulatedReferrerFeesSf", err)
	}
	// Serialize `PendingReferrerFeesSf`:
	err = encoder.Encode(obj.PendingReferrerFeesSf)
	if err != nil {
		return errors.NewField("PendingReferrerFeesSf", err)
	}
	// Serialize `AbsoluteReferralRateSf`:
	err = encoder.Encode(obj.AbsoluteReferralRateSf)
	if err != nil {
		return errors.NewField("AbsoluteReferralRateSf", err)
	}
	// Serialize `TokenProgram`:
	err = encoder.Encode(obj.TokenProgram)
	if err != nil {
		return errors.NewField("TokenProgram", err)
	}
	// Serialize `Padding2`:
	err = encoder.Encode(obj.Padding2)
	if err != nil {
		return errors.NewField("Padding2", err)
	}
	// Serialize `Padding3`:
	err = encoder.Encode(obj.Padding3)
	if err != nil {
		return errors.NewField("Padding3", err)
	}
	return nil
}

func (obj ReserveLiquidity) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding ReserveLiquidity: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *ReserveLiquidity) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `MintPubkey`:
	err = decoder.Decode(&obj.MintPubkey)
	if err != nil {
		return errors.NewField("MintPubkey", err)
	}
	// Deserialize `SupplyVault`:
	err = decoder.Decode(&obj.SupplyVault)
	if err != nil {
		return errors.NewField("SupplyVault", err)
	}
	// Deserialize `FeeVault`:
	err = decoder.Decode(&obj.FeeVault)
	if err != nil {
		return errors.NewField("FeeVault", err)
	}
	// Deserialize `AvailableAmount`:
	err = decoder.Decode(&obj.AvailableAmount)
	if err != nil {
		return errors.NewField("AvailableAmount", err)
	}
	// Deserialize `BorrowedAmountSf`:
	err = decoder.Decode(&obj.BorrowedAmountSf)
	if err != nil {
		return errors.NewField("BorrowedAmountSf", err)
	}
	// Deserialize `MarketPriceSf`:
	err = decoder.Decode(&obj.MarketPriceSf)
	if err != nil {
		return errors.NewField("MarketPriceSf", err)
	}
	// Deserialize `MarketPriceLastUpdatedTs`:
	err = decoder.Decode(&obj.MarketPriceLastUpdatedTs)
	if err != nil {
		return errors.NewField("MarketPriceLastUpdatedTs", err)
	}
	// Deserialize `MintDecimals`:
	err = decoder.Decode(&obj.MintDecimals)
	if err != nil {
		return errors.NewField("MintDecimals", err)
	}
	// Deserialize `DepositLimitCrossedTimestamp`:
	err = decoder.Decode(&obj.DepositLimitCrossedTimestamp)
	if err != nil {
		return errors.NewField("DepositLimitCrossedTimestamp", err)
	}
	// Deserialize `BorrowLimitCrossedTimestamp`:
	err = decoder.Decode(&obj.BorrowLimitCrossedTimestamp)
	if err != nil {
		return errors.NewField("BorrowLimitCrossedTimestamp", err)
	}
	// Deserialize `CumulativeBorrowRateBsf`:
	err = decoder.Decode(&obj.CumulativeBorrowRateBsf)
	if err != nil {
		return errors.NewField("CumulativeBorrowRateBsf", err)
	}
	// Deserialize `AccumulatedProtocolFeesSf`:
	err = decoder.Decode(&obj.AccumulatedProtocolFeesSf)
	if err != nil {
		return errors.NewField("AccumulatedProtocolFeesSf", err)
	}
	// Deserialize `AccumulatedReferrerFeesSf`:
	err = decoder.Decode(&obj.AccumulatedReferrerFeesSf)
	if err != nil {
		return errors.NewField("AccumulatedReferrerFeesSf", err)
	}
	// Deserialize `PendingReferrerFeesSf`:
	err = decoder.Decode(&obj.PendingReferrerFeesSf)
	if err != nil {
		return errors.NewField("PendingReferrerFeesSf", err)
	}
	// Deserialize `AbsoluteReferralRateSf`:
	err = decoder.Decode(&obj.AbsoluteReferralRateSf)
	if err != nil {
		return errors.NewField("AbsoluteReferralRateSf", err)
	}
	// Deserialize `TokenProgram`:
	err = decoder.Decode(&obj.TokenProgram)
	if err != nil {
		return errors.NewField("TokenProgram", err)
	}
	// Deserialize `Padding2`:
	err = decoder.Decode(&obj.Padding2)
	if err != nil {
		return errors.NewField("Padding2", err)
	}
	// Deserialize `Padding3`:
	err = decoder.Decode(&obj.Padding3)
	if err != nil {
		return errors.NewField("Padding3", err)
	}
	return nil
}

func (obj *ReserveLiquidity) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling ReserveLiquidity: %w", err)
	}
	return nil
}

func UnmarshalReserveLiquidity(buf []byte) (*ReserveLiquidity, error) {
	obj := new(ReserveLiquidity)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type ReserveStatus binary.BorshEnum

const (
	ReserveStatus_Active ReserveStatus = iota
	ReserveStatus_Obsolete
	ReserveStatus_Hidden
)

func (value ReserveStatus) String() string {
	switch value {
	case ReserveStatus_Active:
		return "Active"
	case ReserveStatus_Obsolete:
		return "Obsolete"
	case ReserveStatus_Hidden:
		return "Hidden"
	default:
		return ""
	}
}

// Reserve Withdrawal Caps State
type WithdrawalCaps struct {
	ConfigCapacity              int64  `json:"configCapacity"`
	CurrentTotal                int64  `json:"currentTotal"`
	LastIntervalStartTimestamp  uint64 `json:"lastIntervalStartTimestamp"`
	ConfigIntervalLengthSeconds uint64 `json:"configIntervalLengthSeconds"`
}

func (obj WithdrawalCaps) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `ConfigCapacity`:
	err = encoder.Encode(obj.ConfigCapacity)
	if err != nil {
		return errors.NewField("ConfigCapacity", err)
	}
	// Serialize `CurrentTotal`:
	err = encoder.Encode(obj.CurrentTotal)
	if err != nil {
		return errors.NewField("CurrentTotal", err)
	}
	// Serialize `LastIntervalStartTimestamp`:
	err = encoder.Encode(obj.LastIntervalStartTimestamp)
	if err != nil {
		return errors.NewField("LastIntervalStartTimestamp", err)
	}
	// Serialize `ConfigIntervalLengthSeconds`:
	err = encoder.Encode(obj.ConfigIntervalLengthSeconds)
	if err != nil {
		return errors.NewField("ConfigIntervalLengthSeconds", err)
	}
	return nil
}

func (obj WithdrawalCaps) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding WithdrawalCaps: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *WithdrawalCaps) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `ConfigCapacity`:
	err = decoder.Decode(&obj.ConfigCapacity)
	if err != nil {
		return errors.NewField("ConfigCapacity", err)
	}
	// Deserialize `CurrentTotal`:
	err = decoder.Decode(&obj.CurrentTotal)
	if err != nil {
		return errors.NewField("CurrentTotal", err)
	}
	// Deserialize `LastIntervalStartTimestamp`:
	err = decoder.Decode(&obj.LastIntervalStartTimestamp)
	if err != nil {
		return errors.NewField("LastIntervalStartTimestamp", err)
	}
	// Deserialize `ConfigIntervalLengthSeconds`:
	err = decoder.Decode(&obj.ConfigIntervalLengthSeconds)
	if err != nil {
		return errors.NewField("ConfigIntervalLengthSeconds", err)
	}
	return nil
}

func (obj *WithdrawalCaps) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling WithdrawalCaps: %w", err)
	}
	return nil
}

func UnmarshalWithdrawalCaps(buf []byte) (*WithdrawalCaps, error) {
	obj := new(WithdrawalCaps)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type PriceHeuristic struct {
	// Lower value of acceptable price
	Lower uint64 `json:"lower"`

	// Upper value of acceptable price
	Upper uint64 `json:"upper"`

	// Number of decimals of the previously defined values
	Exp uint64 `json:"exp"`
}

func (obj PriceHeuristic) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Lower`:
	err = encoder.Encode(obj.Lower)
	if err != nil {
		return errors.NewField("Lower", err)
	}
	// Serialize `Upper`:
	err = encoder.Encode(obj.Upper)
	if err != nil {
		return errors.NewField("Upper", err)
	}
	// Serialize `Exp`:
	err = encoder.Encode(obj.Exp)
	if err != nil {
		return errors.NewField("Exp", err)
	}
	return nil
}

func (obj PriceHeuristic) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding PriceHeuristic: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *PriceHeuristic) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Lower`:
	err = decoder.Decode(&obj.Lower)
	if err != nil {
		return errors.NewField("Lower", err)
	}
	// Deserialize `Upper`:
	err = decoder.Decode(&obj.Upper)
	if err != nil {
		return errors.NewField("Upper", err)
	}
	// Deserialize `Exp`:
	err = decoder.Decode(&obj.Exp)
	if err != nil {
		return errors.NewField("Exp", err)
	}
	return nil
}

func (obj *PriceHeuristic) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling PriceHeuristic: %w", err)
	}
	return nil
}

func UnmarshalPriceHeuristic(buf []byte) (*PriceHeuristic, error) {
	obj := new(PriceHeuristic)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type PythConfiguration struct {
	// Pubkey of the base price feed (disabled if `null` or `default`)
	Price solanago.PublicKey `json:"price"`
}

func (obj PythConfiguration) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Price`:
	err = encoder.Encode(obj.Price)
	if err != nil {
		return errors.NewField("Price", err)
	}
	return nil
}

func (obj PythConfiguration) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding PythConfiguration: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *PythConfiguration) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Price`:
	err = decoder.Decode(&obj.Price)
	if err != nil {
		return errors.NewField("Price", err)
	}
	return nil
}

func (obj *PythConfiguration) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling PythConfiguration: %w", err)
	}
	return nil
}

func UnmarshalPythConfiguration(buf []byte) (*PythConfiguration, error) {
	obj := new(PythConfiguration)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type ScopeConfiguration struct {
	// Pubkey of the scope price feed (disabled if `null` or `default`)
	PriceFeed solanago.PublicKey `json:"priceFeed"`

	// This is the scope_id price chain that results in a price for the token
	PriceChain [4]uint16 `json:"priceChain"`

	// This is the scope_id price chain for the twap
	TwapChain [4]uint16 `json:"twapChain"`
}

func (obj ScopeConfiguration) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `PriceFeed`:
	err = encoder.Encode(obj.PriceFeed)
	if err != nil {
		return errors.NewField("PriceFeed", err)
	}
	// Serialize `PriceChain`:
	err = encoder.Encode(obj.PriceChain)
	if err != nil {
		return errors.NewField("PriceChain", err)
	}
	// Serialize `TwapChain`:
	err = encoder.Encode(obj.TwapChain)
	if err != nil {
		return errors.NewField("TwapChain", err)
	}
	return nil
}

func (obj ScopeConfiguration) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding ScopeConfiguration: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *ScopeConfiguration) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `PriceFeed`:
	err = decoder.Decode(&obj.PriceFeed)
	if err != nil {
		return errors.NewField("PriceFeed", err)
	}
	// Deserialize `PriceChain`:
	err = decoder.Decode(&obj.PriceChain)
	if err != nil {
		return errors.NewField("PriceChain", err)
	}
	// Deserialize `TwapChain`:
	err = decoder.Decode(&obj.TwapChain)
	if err != nil {
		return errors.NewField("TwapChain", err)
	}
	return nil
}

func (obj *ScopeConfiguration) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling ScopeConfiguration: %w", err)
	}
	return nil
}

func UnmarshalScopeConfiguration(buf []byte) (*ScopeConfiguration, error) {
	obj := new(ScopeConfiguration)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type SwitchboardConfiguration struct {
	// Pubkey of the base price feed (disabled if `null` or `default`)
	PriceAggregator solanago.PublicKey `json:"priceAggregator"`
	TwapAggregator  solanago.PublicKey `json:"twapAggregator"`
}

func (obj SwitchboardConfiguration) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `PriceAggregator`:
	err = encoder.Encode(obj.PriceAggregator)
	if err != nil {
		return errors.NewField("PriceAggregator", err)
	}
	// Serialize `TwapAggregator`:
	err = encoder.Encode(obj.TwapAggregator)
	if err != nil {
		return errors.NewField("TwapAggregator", err)
	}
	return nil
}

func (obj SwitchboardConfiguration) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding SwitchboardConfiguration: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *SwitchboardConfiguration) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `PriceAggregator`:
	err = decoder.Decode(&obj.PriceAggregator)
	if err != nil {
		return errors.NewField("PriceAggregator", err)
	}
	// Deserialize `TwapAggregator`:
	err = decoder.Decode(&obj.TwapAggregator)
	if err != nil {
		return errors.NewField("TwapAggregator", err)
	}
	return nil
}

func (obj *SwitchboardConfiguration) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling SwitchboardConfiguration: %w", err)
	}
	return nil
}

func UnmarshalSwitchboardConfiguration(buf []byte) (*SwitchboardConfiguration, error) {
	obj := new(SwitchboardConfiguration)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type TokenInfo struct {
	// UTF-8 encoded name of the token (null-terminated)
	Name [32]uint8 `json:"name"`

	// Heuristics limits of acceptable price
	Heuristic PriceHeuristic `json:"heuristic"`

	// Max divergence between twap and price in bps
	MaxTwapDivergenceBps uint64 `json:"maxTwapDivergenceBps"`
	MaxAgePriceSeconds   uint64 `json:"maxAgePriceSeconds"`
	MaxAgeTwapSeconds    uint64 `json:"maxAgeTwapSeconds"`

	// Scope price configuration
	ScopeConfiguration ScopeConfiguration `json:"scopeConfiguration"`

	// Switchboard configuration
	SwitchboardConfiguration SwitchboardConfiguration `json:"switchboardConfiguration"`

	// Pyth configuration
	PythConfiguration PythConfiguration `json:"pythConfiguration"`
	BlockPriceUsage   uint8             `json:"blockPriceUsage"`
	Reserved          [7]uint8          `json:"reserved"`
	Padding           [19]uint64        `json:"padding"`
}

func (obj TokenInfo) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Name`:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return errors.NewField("Name", err)
	}
	// Serialize `Heuristic`:
	err = encoder.Encode(obj.Heuristic)
	if err != nil {
		return errors.NewField("Heuristic", err)
	}
	// Serialize `MaxTwapDivergenceBps`:
	err = encoder.Encode(obj.MaxTwapDivergenceBps)
	if err != nil {
		return errors.NewField("MaxTwapDivergenceBps", err)
	}
	// Serialize `MaxAgePriceSeconds`:
	err = encoder.Encode(obj.MaxAgePriceSeconds)
	if err != nil {
		return errors.NewField("MaxAgePriceSeconds", err)
	}
	// Serialize `MaxAgeTwapSeconds`:
	err = encoder.Encode(obj.MaxAgeTwapSeconds)
	if err != nil {
		return errors.NewField("MaxAgeTwapSeconds", err)
	}
	// Serialize `ScopeConfiguration`:
	err = encoder.Encode(obj.ScopeConfiguration)
	if err != nil {
		return errors.NewField("ScopeConfiguration", err)
	}
	// Serialize `SwitchboardConfiguration`:
	err = encoder.Encode(obj.SwitchboardConfiguration)
	if err != nil {
		return errors.NewField("SwitchboardConfiguration", err)
	}
	// Serialize `PythConfiguration`:
	err = encoder.Encode(obj.PythConfiguration)
	if err != nil {
		return errors.NewField("PythConfiguration", err)
	}
	// Serialize `BlockPriceUsage`:
	err = encoder.Encode(obj.BlockPriceUsage)
	if err != nil {
		return errors.NewField("BlockPriceUsage", err)
	}
	// Serialize `Reserved`:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return errors.NewField("Reserved", err)
	}
	// Serialize `Padding`:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj TokenInfo) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding TokenInfo: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *TokenInfo) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return errors.NewField("Name", err)
	}
	// Deserialize `Heuristic`:
	err = decoder.Decode(&obj.Heuristic)
	if err != nil {
		return errors.NewField("Heuristic", err)
	}
	// Deserialize `MaxTwapDivergenceBps`:
	err = decoder.Decode(&obj.MaxTwapDivergenceBps)
	if err != nil {
		return errors.NewField("MaxTwapDivergenceBps", err)
	}
	// Deserialize `MaxAgePriceSeconds`:
	err = decoder.Decode(&obj.MaxAgePriceSeconds)
	if err != nil {
		return errors.NewField("MaxAgePriceSeconds", err)
	}
	// Deserialize `MaxAgeTwapSeconds`:
	err = decoder.Decode(&obj.MaxAgeTwapSeconds)
	if err != nil {
		return errors.NewField("MaxAgeTwapSeconds", err)
	}
	// Deserialize `ScopeConfiguration`:
	err = decoder.Decode(&obj.ScopeConfiguration)
	if err != nil {
		return errors.NewField("ScopeConfiguration", err)
	}
	// Deserialize `SwitchboardConfiguration`:
	err = decoder.Decode(&obj.SwitchboardConfiguration)
	if err != nil {
		return errors.NewField("SwitchboardConfiguration", err)
	}
	// Deserialize `PythConfiguration`:
	err = decoder.Decode(&obj.PythConfiguration)
	if err != nil {
		return errors.NewField("PythConfiguration", err)
	}
	// Deserialize `BlockPriceUsage`:
	err = decoder.Decode(&obj.BlockPriceUsage)
	if err != nil {
		return errors.NewField("BlockPriceUsage", err)
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return errors.NewField("Reserved", err)
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj *TokenInfo) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling TokenInfo: %w", err)
	}
	return nil
}

func UnmarshalTokenInfo(buf []byte) (*TokenInfo, error) {
	obj := new(TokenInfo)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type BorrowRateCurve struct {
	Points [11]CurvePoint `json:"points"`
}

func (obj BorrowRateCurve) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Points`:
	err = encoder.Encode(obj.Points)
	if err != nil {
		return errors.NewField("Points", err)
	}
	return nil
}

func (obj BorrowRateCurve) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding BorrowRateCurve: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *BorrowRateCurve) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Points`:
	err = decoder.Decode(&obj.Points)
	if err != nil {
		return errors.NewField("Points", err)
	}
	return nil
}

func (obj *BorrowRateCurve) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling BorrowRateCurve: %w", err)
	}
	return nil
}

func UnmarshalBorrowRateCurve(buf []byte) (*BorrowRateCurve, error) {
	obj := new(BorrowRateCurve)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type CurvePoint struct {
	UtilizationRateBps uint32 `json:"utilizationRateBps"`
	BorrowRateBps      uint32 `json:"borrowRateBps"`
}

func (obj CurvePoint) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `UtilizationRateBps`:
	err = encoder.Encode(obj.UtilizationRateBps)
	if err != nil {
		return errors.NewField("UtilizationRateBps", err)
	}
	// Serialize `BorrowRateBps`:
	err = encoder.Encode(obj.BorrowRateBps)
	if err != nil {
		return errors.NewField("BorrowRateBps", err)
	}
	return nil
}

func (obj CurvePoint) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding CurvePoint: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *CurvePoint) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `UtilizationRateBps`:
	err = decoder.Decode(&obj.UtilizationRateBps)
	if err != nil {
		return errors.NewField("UtilizationRateBps", err)
	}
	// Deserialize `BorrowRateBps`:
	err = decoder.Decode(&obj.BorrowRateBps)
	if err != nil {
		return errors.NewField("BorrowRateBps", err)
	}
	return nil
}

func (obj *CurvePoint) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling CurvePoint: %w", err)
	}
	return nil
}

func UnmarshalCurvePoint(buf []byte) (*CurvePoint, error) {
	obj := new(CurvePoint)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type UserState struct {
	UserId    uint64             `json:"userId"`
	FarmState solanago.PublicKey `json:"farmState"`
	Owner     solanago.PublicKey `json:"owner"`

	// Indicate if this user state is part of a delegated farm
	IsFarmDelegated uint8    `json:"isFarmDelegated"`
	Padding0        [7]uint8 `json:"padding0"`

	// Rewards tally used for computation of gained rewards
	// (scaled from `Decimal` representation).
	RewardsTallyScaled [10]binary.Uint128 `json:"rewardsTallyScaled"`

	// Number of reward tokens ready for claim
	RewardsIssuedUnclaimed [10]uint64 `json:"rewardsIssuedUnclaimed"`
	LastClaimTs            [10]uint64 `json:"lastClaimTs"`

	// User stake deposited and usable, generating rewards and fees.
	// (scaled from `Decimal` representation).
	ActiveStakeScaled binary.Uint128 `json:"activeStakeScaled"`

	// User stake deposited but not usable and not generating rewards yet.
	// (scaled from `Decimal` representation).
	PendingDepositStakeScaled binary.Uint128 `json:"pendingDepositStakeScaled"`

	// After this timestamp, pending user stake can be moved to user stake
	// Initialized to now() + delayed user stake period
	PendingDepositStakeTs uint64 `json:"pendingDepositStakeTs"`

	// User deposits unstaked, pending for withdrawal, not usable and not generating rewards.
	// (scaled from `Decimal` representation).
	PendingWithdrawalUnstakeScaled binary.Uint128 `json:"pendingWithdrawalUnstakeScaled"`

	// After this timestamp, user can withdraw their deposit.
	PendingWithdrawalUnstakeTs uint64 `json:"pendingWithdrawalUnstakeTs"`

	// User bump used for account address validation
	Bump uint64 `json:"bump"`

	// Delegatee used for initialisation - useful to check against
	Delegatee   solanago.PublicKey `json:"delegatee"`
	LastStakeTs uint64             `json:"lastStakeTs"`
	Padding1    [50]uint64         `json:"padding1"`
}

func (obj UserState) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `UserId`:
	err = encoder.Encode(obj.UserId)
	if err != nil {
		return errors.NewField("UserId", err)
	}
	// Serialize `FarmState`:
	err = encoder.Encode(obj.FarmState)
	if err != nil {
		return errors.NewField("FarmState", err)
	}
	// Serialize `Owner`:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	// Serialize `IsFarmDelegated`:
	err = encoder.Encode(obj.IsFarmDelegated)
	if err != nil {
		return errors.NewField("IsFarmDelegated", err)
	}
	// Serialize `Padding0`:
	err = encoder.Encode(obj.Padding0)
	if err != nil {
		return errors.NewField("Padding0", err)
	}
	// Serialize `RewardsTallyScaled`:
	err = encoder.Encode(obj.RewardsTallyScaled)
	if err != nil {
		return errors.NewField("RewardsTallyScaled", err)
	}
	// Serialize `RewardsIssuedUnclaimed`:
	err = encoder.Encode(obj.RewardsIssuedUnclaimed)
	if err != nil {
		return errors.NewField("RewardsIssuedUnclaimed", err)
	}
	// Serialize `LastClaimTs`:
	err = encoder.Encode(obj.LastClaimTs)
	if err != nil {
		return errors.NewField("LastClaimTs", err)
	}
	// Serialize `ActiveStakeScaled`:
	err = encoder.Encode(obj.ActiveStakeScaled)
	if err != nil {
		return errors.NewField("ActiveStakeScaled", err)
	}
	// Serialize `PendingDepositStakeScaled`:
	err = encoder.Encode(obj.PendingDepositStakeScaled)
	if err != nil {
		return errors.NewField("PendingDepositStakeScaled", err)
	}
	// Serialize `PendingDepositStakeTs`:
	err = encoder.Encode(obj.PendingDepositStakeTs)
	if err != nil {
		return errors.NewField("PendingDepositStakeTs", err)
	}
	// Serialize `PendingWithdrawalUnstakeScaled`:
	err = encoder.Encode(obj.PendingWithdrawalUnstakeScaled)
	if err != nil {
		return errors.NewField("PendingWithdrawalUnstakeScaled", err)
	}
	// Serialize `PendingWithdrawalUnstakeTs`:
	err = encoder.Encode(obj.PendingWithdrawalUnstakeTs)
	if err != nil {
		return errors.NewField("PendingWithdrawalUnstakeTs", err)
	}
	// Serialize `Bump`:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return errors.NewField("Bump", err)
	}
	// Serialize `Delegatee`:
	err = encoder.Encode(obj.Delegatee)
	if err != nil {
		return errors.NewField("Delegatee", err)
	}
	// Serialize `LastStakeTs`:
	err = encoder.Encode(obj.LastStakeTs)
	if err != nil {
		return errors.NewField("LastStakeTs", err)
	}
	// Serialize `Padding1`:
	err = encoder.Encode(obj.Padding1)
	if err != nil {
		return errors.NewField("Padding1", err)
	}
	return nil
}

func (obj UserState) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding UserState: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *UserState) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `UserId`:
	err = decoder.Decode(&obj.UserId)
	if err != nil {
		return errors.NewField("UserId", err)
	}
	// Deserialize `FarmState`:
	err = decoder.Decode(&obj.FarmState)
	if err != nil {
		return errors.NewField("FarmState", err)
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	// Deserialize `IsFarmDelegated`:
	err = decoder.Decode(&obj.IsFarmDelegated)
	if err != nil {
		return errors.NewField("IsFarmDelegated", err)
	}
	// Deserialize `Padding0`:
	err = decoder.Decode(&obj.Padding0)
	if err != nil {
		return errors.NewField("Padding0", err)
	}
	// Deserialize `RewardsTallyScaled`:
	err = decoder.Decode(&obj.RewardsTallyScaled)
	if err != nil {
		return errors.NewField("RewardsTallyScaled", err)
	}
	// Deserialize `RewardsIssuedUnclaimed`:
	err = decoder.Decode(&obj.RewardsIssuedUnclaimed)
	if err != nil {
		return errors.NewField("RewardsIssuedUnclaimed", err)
	}
	// Deserialize `LastClaimTs`:
	err = decoder.Decode(&obj.LastClaimTs)
	if err != nil {
		return errors.NewField("LastClaimTs", err)
	}
	// Deserialize `ActiveStakeScaled`:
	err = decoder.Decode(&obj.ActiveStakeScaled)
	if err != nil {
		return errors.NewField("ActiveStakeScaled", err)
	}
	// Deserialize `PendingDepositStakeScaled`:
	err = decoder.Decode(&obj.PendingDepositStakeScaled)
	if err != nil {
		return errors.NewField("PendingDepositStakeScaled", err)
	}
	// Deserialize `PendingDepositStakeTs`:
	err = decoder.Decode(&obj.PendingDepositStakeTs)
	if err != nil {
		return errors.NewField("PendingDepositStakeTs", err)
	}
	// Deserialize `PendingWithdrawalUnstakeScaled`:
	err = decoder.Decode(&obj.PendingWithdrawalUnstakeScaled)
	if err != nil {
		return errors.NewField("PendingWithdrawalUnstakeScaled", err)
	}
	// Deserialize `PendingWithdrawalUnstakeTs`:
	err = decoder.Decode(&obj.PendingWithdrawalUnstakeTs)
	if err != nil {
		return errors.NewField("PendingWithdrawalUnstakeTs", err)
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return errors.NewField("Bump", err)
	}
	// Deserialize `Delegatee`:
	err = decoder.Decode(&obj.Delegatee)
	if err != nil {
		return errors.NewField("Delegatee", err)
	}
	// Deserialize `LastStakeTs`:
	err = decoder.Decode(&obj.LastStakeTs)
	if err != nil {
		return errors.NewField("LastStakeTs", err)
	}
	// Deserialize `Padding1`:
	err = decoder.Decode(&obj.Padding1)
	if err != nil {
		return errors.NewField("Padding1", err)
	}
	return nil
}

func (obj *UserState) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling UserState: %w", err)
	}
	return nil
}

func UnmarshalUserState(buf []byte) (*UserState, error) {
	obj := new(UserState)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type GlobalConfig struct {
	// Global admin of the program
	GlobalAdmin solanago.PublicKey `json:"globalAdmin"`

	// Pending admin must sign a specific transaction to become the global admin
	PendingAdmin solanago.PublicKey `json:"pendingAdmin"`

	// Fee collector is the only allowed owner of token accounts receiving protocol fees
	FeeCollector solanago.PublicKey `json:"feeCollector"`

	// Padding to make the struct size 1024 bytes
	Padding [928]uint8 `json:"padding"`
}

func (obj GlobalConfig) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `GlobalAdmin`:
	err = encoder.Encode(obj.GlobalAdmin)
	if err != nil {
		return errors.NewField("GlobalAdmin", err)
	}
	// Serialize `PendingAdmin`:
	err = encoder.Encode(obj.PendingAdmin)
	if err != nil {
		return errors.NewField("PendingAdmin", err)
	}
	// Serialize `FeeCollector`:
	err = encoder.Encode(obj.FeeCollector)
	if err != nil {
		return errors.NewField("FeeCollector", err)
	}
	// Serialize `Padding`:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj GlobalConfig) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding GlobalConfig: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *GlobalConfig) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `GlobalAdmin`:
	err = decoder.Decode(&obj.GlobalAdmin)
	if err != nil {
		return errors.NewField("GlobalAdmin", err)
	}
	// Deserialize `PendingAdmin`:
	err = decoder.Decode(&obj.PendingAdmin)
	if err != nil {
		return errors.NewField("PendingAdmin", err)
	}
	// Deserialize `FeeCollector`:
	err = decoder.Decode(&obj.FeeCollector)
	if err != nil {
		return errors.NewField("FeeCollector", err)
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj *GlobalConfig) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling GlobalConfig: %w", err)
	}
	return nil
}

func UnmarshalGlobalConfig(buf []byte) (*GlobalConfig, error) {
	obj := new(GlobalConfig)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type LendingMarket struct {
	// Version of lending market
	Version uint64 `json:"version"`

	// Bump seed for derived authority address
	BumpSeed uint64 `json:"bumpSeed"`

	// Owner authority which can add new reserves
	LendingMarketOwner solanago.PublicKey `json:"lendingMarketOwner"`

	// Temporary cache of the lending market owner, used in update_lending_market_owner
	LendingMarketOwnerCached solanago.PublicKey `json:"lendingMarketOwnerCached"`

	// Currency market prices are quoted in
	// e.g. "USD" null padded (`*b"USD\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"`) or a SPL token mint pubkey
	QuoteCurrency [32]uint8 `json:"quoteCurrency"`

	// Referral fee for the lending market, as bps out of the total protocol fee
	ReferralFeeBps uint16 `json:"referralFeeBps"`
	EmergencyMode  uint8  `json:"emergencyMode"`

	// Whether the obligations on this market should be subject to auto-deleveraging after deposit
	// or borrow limit is crossed.
	// Besides this flag, the particular reserve's flag also needs to be enabled (logical `AND`).
	// **NOTE:** this also affects the individual "target LTV" deleveraging.
	AutodeleverageEnabled uint8 `json:"autodeleverageEnabled"`
	BorrowDisabled        uint8 `json:"borrowDisabled"`

	// Refresh price from oracle only if it's older than this percentage of the price max age.
	// e.g. if the max age is set to 100s and this is set to 80%, the price will be refreshed if it's older than 80s.
	// Price is always refreshed if this set to 0.
	PriceRefreshTriggerToMaxAgePct uint8 `json:"priceRefreshTriggerToMaxAgePct"`

	// Percentage of the total borrowed value in an obligation available for liquidation
	LiquidationMaxDebtCloseFactorPct uint8 `json:"liquidationMaxDebtCloseFactorPct"`

	// Minimum acceptable unhealthy LTV before max_debt_close_factor_pct becomes 100%
	InsolvencyRiskUnhealthyLtvPct uint8 `json:"insolvencyRiskUnhealthyLtvPct"`

	// Minimum liquidation value threshold triggering full liquidation for an obligation
	MinFullLiquidationValueThreshold uint64 `json:"minFullLiquidationValueThreshold"`

	// Max allowed liquidation value in one ix call
	MaxLiquidatableDebtMarketValueAtOnce uint64 `json:"maxLiquidatableDebtMarketValueAtOnce"`

	// [DEPRECATED] Global maximum unhealthy borrow value allowed for any obligation
	Reserved0 [8]uint8 `json:"reserved0"`

	// Global maximum allowed borrow value allowed for any obligation
	GlobalAllowedBorrowValue uint64 `json:"globalAllowedBorrowValue"`

	// The address of the risk council, in charge of making parameter and risk decisions on behalf of the protocol
	RiskCouncil solanago.PublicKey `json:"riskCouncil"`

	// [DEPRECATED] Reward points multiplier per obligation type
	Reserved1 [8]uint8 `json:"reserved1"`

	// Elevation groups are used to group together reserves that have the same risk parameters and can bump the ltv and liquidation threshold
	ElevationGroups       [32]ElevationGroup `json:"elevationGroups"`
	ElevationGroupPadding [90]uint64         `json:"elevationGroupPadding"`

	// Min net value accepted to be found in a position after any lending action in an obligation (scaled by quote currency decimals)
	MinNetValueInObligationSf binary.Uint128 `json:"minNetValueInObligationSf"`

	// Minimum value to enforce smallest ltv priority checks on the collateral reserves on liquidation
	MinValueSkipLiquidationLtvChecks uint64 `json:"minValueSkipLiquidationLtvChecks"`

	// Market name, zero-padded.
	Name [32]uint8 `json:"name"`

	// Minimum value to enforce highest borrow factor priority checks on the debt reserves on liquidation
	MinValueSkipLiquidationBfChecks uint64 `json:"minValueSkipLiquidationBfChecks"`

	// Time (in seconds) that must pass before liquidation is allowed on an obligation that has
	// been individually marked for auto-deleveraging (by the risk council).
	IndividualAutodeleverageMarginCallPeriodSecs uint64 `json:"individualAutodeleverageMarginCallPeriodSecs"`

	// Minimum amount of deposit at creation of a reserve to prevent artificial inflation
	// Note: this amount cannot be recovered, the ctoken associated are never minted
	MinInitialDepositAmount uint64 `json:"minInitialDepositAmount"`

	// Whether the obligation orders should be evaluated during liquidations.
	ObligationOrderExecutionEnabled uint8 `json:"obligationOrderExecutionEnabled"`

	// Whether the lending market is set as immutable.
	Immutable uint8 `json:"immutable"`

	// Whether new obligation orders can be created.
	// Note: updating or cancelling existing orders is *not* affected by this flag.
	ObligationOrderCreationEnabled uint8       `json:"obligationOrderCreationEnabled"`
	Padding2                       [5]uint8    `json:"padding2"`
	Padding1                       [169]uint64 `json:"padding1"`
}

func (obj LendingMarket) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Version`:
	err = encoder.Encode(obj.Version)
	if err != nil {
		return errors.NewField("Version", err)
	}
	// Serialize `BumpSeed`:
	err = encoder.Encode(obj.BumpSeed)
	if err != nil {
		return errors.NewField("BumpSeed", err)
	}
	// Serialize `LendingMarketOwner`:
	err = encoder.Encode(obj.LendingMarketOwner)
	if err != nil {
		return errors.NewField("LendingMarketOwner", err)
	}
	// Serialize `LendingMarketOwnerCached`:
	err = encoder.Encode(obj.LendingMarketOwnerCached)
	if err != nil {
		return errors.NewField("LendingMarketOwnerCached", err)
	}
	// Serialize `QuoteCurrency`:
	err = encoder.Encode(obj.QuoteCurrency)
	if err != nil {
		return errors.NewField("QuoteCurrency", err)
	}
	// Serialize `ReferralFeeBps`:
	err = encoder.Encode(obj.ReferralFeeBps)
	if err != nil {
		return errors.NewField("ReferralFeeBps", err)
	}
	// Serialize `EmergencyMode`:
	err = encoder.Encode(obj.EmergencyMode)
	if err != nil {
		return errors.NewField("EmergencyMode", err)
	}
	// Serialize `AutodeleverageEnabled`:
	err = encoder.Encode(obj.AutodeleverageEnabled)
	if err != nil {
		return errors.NewField("AutodeleverageEnabled", err)
	}
	// Serialize `BorrowDisabled`:
	err = encoder.Encode(obj.BorrowDisabled)
	if err != nil {
		return errors.NewField("BorrowDisabled", err)
	}
	// Serialize `PriceRefreshTriggerToMaxAgePct`:
	err = encoder.Encode(obj.PriceRefreshTriggerToMaxAgePct)
	if err != nil {
		return errors.NewField("PriceRefreshTriggerToMaxAgePct", err)
	}
	// Serialize `LiquidationMaxDebtCloseFactorPct`:
	err = encoder.Encode(obj.LiquidationMaxDebtCloseFactorPct)
	if err != nil {
		return errors.NewField("LiquidationMaxDebtCloseFactorPct", err)
	}
	// Serialize `InsolvencyRiskUnhealthyLtvPct`:
	err = encoder.Encode(obj.InsolvencyRiskUnhealthyLtvPct)
	if err != nil {
		return errors.NewField("InsolvencyRiskUnhealthyLtvPct", err)
	}
	// Serialize `MinFullLiquidationValueThreshold`:
	err = encoder.Encode(obj.MinFullLiquidationValueThreshold)
	if err != nil {
		return errors.NewField("MinFullLiquidationValueThreshold", err)
	}
	// Serialize `MaxLiquidatableDebtMarketValueAtOnce`:
	err = encoder.Encode(obj.MaxLiquidatableDebtMarketValueAtOnce)
	if err != nil {
		return errors.NewField("MaxLiquidatableDebtMarketValueAtOnce", err)
	}
	// Serialize `Reserved0`:
	err = encoder.Encode(obj.Reserved0)
	if err != nil {
		return errors.NewField("Reserved0", err)
	}
	// Serialize `GlobalAllowedBorrowValue`:
	err = encoder.Encode(obj.GlobalAllowedBorrowValue)
	if err != nil {
		return errors.NewField("GlobalAllowedBorrowValue", err)
	}
	// Serialize `RiskCouncil`:
	err = encoder.Encode(obj.RiskCouncil)
	if err != nil {
		return errors.NewField("RiskCouncil", err)
	}
	// Serialize `Reserved1`:
	err = encoder.Encode(obj.Reserved1)
	if err != nil {
		return errors.NewField("Reserved1", err)
	}
	// Serialize `ElevationGroups`:
	err = encoder.Encode(obj.ElevationGroups)
	if err != nil {
		return errors.NewField("ElevationGroups", err)
	}
	// Serialize `ElevationGroupPadding`:
	err = encoder.Encode(obj.ElevationGroupPadding)
	if err != nil {
		return errors.NewField("ElevationGroupPadding", err)
	}
	// Serialize `MinNetValueInObligationSf`:
	err = encoder.Encode(obj.MinNetValueInObligationSf)
	if err != nil {
		return errors.NewField("MinNetValueInObligationSf", err)
	}
	// Serialize `MinValueSkipLiquidationLtvChecks`:
	err = encoder.Encode(obj.MinValueSkipLiquidationLtvChecks)
	if err != nil {
		return errors.NewField("MinValueSkipLiquidationLtvChecks", err)
	}
	// Serialize `Name`:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return errors.NewField("Name", err)
	}
	// Serialize `MinValueSkipLiquidationBfChecks`:
	err = encoder.Encode(obj.MinValueSkipLiquidationBfChecks)
	if err != nil {
		return errors.NewField("MinValueSkipLiquidationBfChecks", err)
	}
	// Serialize `IndividualAutodeleverageMarginCallPeriodSecs`:
	err = encoder.Encode(obj.IndividualAutodeleverageMarginCallPeriodSecs)
	if err != nil {
		return errors.NewField("IndividualAutodeleverageMarginCallPeriodSecs", err)
	}
	// Serialize `MinInitialDepositAmount`:
	err = encoder.Encode(obj.MinInitialDepositAmount)
	if err != nil {
		return errors.NewField("MinInitialDepositAmount", err)
	}
	// Serialize `ObligationOrderExecutionEnabled`:
	err = encoder.Encode(obj.ObligationOrderExecutionEnabled)
	if err != nil {
		return errors.NewField("ObligationOrderExecutionEnabled", err)
	}
	// Serialize `Immutable`:
	err = encoder.Encode(obj.Immutable)
	if err != nil {
		return errors.NewField("Immutable", err)
	}
	// Serialize `ObligationOrderCreationEnabled`:
	err = encoder.Encode(obj.ObligationOrderCreationEnabled)
	if err != nil {
		return errors.NewField("ObligationOrderCreationEnabled", err)
	}
	// Serialize `Padding2`:
	err = encoder.Encode(obj.Padding2)
	if err != nil {
		return errors.NewField("Padding2", err)
	}
	// Serialize `Padding1`:
	err = encoder.Encode(obj.Padding1)
	if err != nil {
		return errors.NewField("Padding1", err)
	}
	return nil
}

func (obj LendingMarket) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding LendingMarket: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *LendingMarket) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Version`:
	err = decoder.Decode(&obj.Version)
	if err != nil {
		return errors.NewField("Version", err)
	}
	// Deserialize `BumpSeed`:
	err = decoder.Decode(&obj.BumpSeed)
	if err != nil {
		return errors.NewField("BumpSeed", err)
	}
	// Deserialize `LendingMarketOwner`:
	err = decoder.Decode(&obj.LendingMarketOwner)
	if err != nil {
		return errors.NewField("LendingMarketOwner", err)
	}
	// Deserialize `LendingMarketOwnerCached`:
	err = decoder.Decode(&obj.LendingMarketOwnerCached)
	if err != nil {
		return errors.NewField("LendingMarketOwnerCached", err)
	}
	// Deserialize `QuoteCurrency`:
	err = decoder.Decode(&obj.QuoteCurrency)
	if err != nil {
		return errors.NewField("QuoteCurrency", err)
	}
	// Deserialize `ReferralFeeBps`:
	err = decoder.Decode(&obj.ReferralFeeBps)
	if err != nil {
		return errors.NewField("ReferralFeeBps", err)
	}
	// Deserialize `EmergencyMode`:
	err = decoder.Decode(&obj.EmergencyMode)
	if err != nil {
		return errors.NewField("EmergencyMode", err)
	}
	// Deserialize `AutodeleverageEnabled`:
	err = decoder.Decode(&obj.AutodeleverageEnabled)
	if err != nil {
		return errors.NewField("AutodeleverageEnabled", err)
	}
	// Deserialize `BorrowDisabled`:
	err = decoder.Decode(&obj.BorrowDisabled)
	if err != nil {
		return errors.NewField("BorrowDisabled", err)
	}
	// Deserialize `PriceRefreshTriggerToMaxAgePct`:
	err = decoder.Decode(&obj.PriceRefreshTriggerToMaxAgePct)
	if err != nil {
		return errors.NewField("PriceRefreshTriggerToMaxAgePct", err)
	}
	// Deserialize `LiquidationMaxDebtCloseFactorPct`:
	err = decoder.Decode(&obj.LiquidationMaxDebtCloseFactorPct)
	if err != nil {
		return errors.NewField("LiquidationMaxDebtCloseFactorPct", err)
	}
	// Deserialize `InsolvencyRiskUnhealthyLtvPct`:
	err = decoder.Decode(&obj.InsolvencyRiskUnhealthyLtvPct)
	if err != nil {
		return errors.NewField("InsolvencyRiskUnhealthyLtvPct", err)
	}
	// Deserialize `MinFullLiquidationValueThreshold`:
	err = decoder.Decode(&obj.MinFullLiquidationValueThreshold)
	if err != nil {
		return errors.NewField("MinFullLiquidationValueThreshold", err)
	}
	// Deserialize `MaxLiquidatableDebtMarketValueAtOnce`:
	err = decoder.Decode(&obj.MaxLiquidatableDebtMarketValueAtOnce)
	if err != nil {
		return errors.NewField("MaxLiquidatableDebtMarketValueAtOnce", err)
	}
	// Deserialize `Reserved0`:
	err = decoder.Decode(&obj.Reserved0)
	if err != nil {
		return errors.NewField("Reserved0", err)
	}
	// Deserialize `GlobalAllowedBorrowValue`:
	err = decoder.Decode(&obj.GlobalAllowedBorrowValue)
	if err != nil {
		return errors.NewField("GlobalAllowedBorrowValue", err)
	}
	// Deserialize `RiskCouncil`:
	err = decoder.Decode(&obj.RiskCouncil)
	if err != nil {
		return errors.NewField("RiskCouncil", err)
	}
	// Deserialize `Reserved1`:
	err = decoder.Decode(&obj.Reserved1)
	if err != nil {
		return errors.NewField("Reserved1", err)
	}
	// Deserialize `ElevationGroups`:
	err = decoder.Decode(&obj.ElevationGroups)
	if err != nil {
		return errors.NewField("ElevationGroups", err)
	}
	// Deserialize `ElevationGroupPadding`:
	err = decoder.Decode(&obj.ElevationGroupPadding)
	if err != nil {
		return errors.NewField("ElevationGroupPadding", err)
	}
	// Deserialize `MinNetValueInObligationSf`:
	err = decoder.Decode(&obj.MinNetValueInObligationSf)
	if err != nil {
		return errors.NewField("MinNetValueInObligationSf", err)
	}
	// Deserialize `MinValueSkipLiquidationLtvChecks`:
	err = decoder.Decode(&obj.MinValueSkipLiquidationLtvChecks)
	if err != nil {
		return errors.NewField("MinValueSkipLiquidationLtvChecks", err)
	}
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return errors.NewField("Name", err)
	}
	// Deserialize `MinValueSkipLiquidationBfChecks`:
	err = decoder.Decode(&obj.MinValueSkipLiquidationBfChecks)
	if err != nil {
		return errors.NewField("MinValueSkipLiquidationBfChecks", err)
	}
	// Deserialize `IndividualAutodeleverageMarginCallPeriodSecs`:
	err = decoder.Decode(&obj.IndividualAutodeleverageMarginCallPeriodSecs)
	if err != nil {
		return errors.NewField("IndividualAutodeleverageMarginCallPeriodSecs", err)
	}
	// Deserialize `MinInitialDepositAmount`:
	err = decoder.Decode(&obj.MinInitialDepositAmount)
	if err != nil {
		return errors.NewField("MinInitialDepositAmount", err)
	}
	// Deserialize `ObligationOrderExecutionEnabled`:
	err = decoder.Decode(&obj.ObligationOrderExecutionEnabled)
	if err != nil {
		return errors.NewField("ObligationOrderExecutionEnabled", err)
	}
	// Deserialize `Immutable`:
	err = decoder.Decode(&obj.Immutable)
	if err != nil {
		return errors.NewField("Immutable", err)
	}
	// Deserialize `ObligationOrderCreationEnabled`:
	err = decoder.Decode(&obj.ObligationOrderCreationEnabled)
	if err != nil {
		return errors.NewField("ObligationOrderCreationEnabled", err)
	}
	// Deserialize `Padding2`:
	err = decoder.Decode(&obj.Padding2)
	if err != nil {
		return errors.NewField("Padding2", err)
	}
	// Deserialize `Padding1`:
	err = decoder.Decode(&obj.Padding1)
	if err != nil {
		return errors.NewField("Padding1", err)
	}
	return nil
}

func (obj *LendingMarket) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling LendingMarket: %w", err)
	}
	return nil
}

func UnmarshalLendingMarket(buf []byte) (*LendingMarket, error) {
	obj := new(LendingMarket)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Lending market obligation state
type Obligation struct {
	// Version of the struct
	Tag uint64 `json:"tag"`

	// Last update to collateral, liquidity, or their market values
	LastUpdate LastUpdate `json:"lastUpdate"`

	// Lending market address
	LendingMarket solanago.PublicKey `json:"lendingMarket"`

	// Owner authority which can borrow liquidity
	Owner solanago.PublicKey `json:"owner"`

	// Deposited collateral for the obligation, unique by deposit reserve address
	Deposits [8]ObligationCollateral `json:"deposits"`

	// Worst LTV for the collaterals backing the loan, represented as a percentage
	LowestReserveDepositLiquidationLtv uint64 `json:"lowestReserveDepositLiquidationLtv"`

	// Market value of deposits (scaled fraction)
	DepositedValueSf binary.Uint128 `json:"depositedValueSf"`

	// Borrowed liquidity for the obligation, unique by borrow reserve address
	Borrows [5]ObligationLiquidity `json:"borrows"`

	// Risk adjusted market value of borrows/debt (sum of price * borrowed_amount * borrow_factor) (scaled fraction)
	BorrowFactorAdjustedDebtValueSf binary.Uint128 `json:"borrowFactorAdjustedDebtValueSf"`

	// Market value of borrows - used for max_liquidatable_borrowed_amount (scaled fraction)
	BorrowedAssetsMarketValueSf binary.Uint128 `json:"borrowedAssetsMarketValueSf"`

	// The maximum borrow value at the weighted average loan to value ratio (scaled fraction)
	AllowedBorrowValueSf binary.Uint128 `json:"allowedBorrowValueSf"`

	// The dangerous borrow value at the weighted average liquidation threshold (scaled fraction)
	UnhealthyBorrowValueSf binary.Uint128 `json:"unhealthyBorrowValueSf"`

	// The asset tier of the deposits
	DepositsAssetTiers [8]uint8 `json:"depositsAssetTiers"`

	// The asset tier of the borrows
	BorrowsAssetTiers [5]uint8 `json:"borrowsAssetTiers"`

	// The elevation group id the obligation opted into.
	ElevationGroup uint8 `json:"elevationGroup"`

	// The number of obsolete reserves the obligation has a deposit in
	NumOfObsoleteDepositReserves uint8 `json:"numOfObsoleteDepositReserves"`

	// Marked = 1 if borrows array is not empty, 0 = borrows empty
	HasDebt uint8 `json:"hasDebt"`

	// Wallet address of the referrer
	Referrer solanago.PublicKey `json:"referrer"`

	// Marked = 1 if borrowing disabled, 0 = borrowing enabled
	BorrowingDisabled uint8 `json:"borrowingDisabled"`

	// A target LTV set by the risk council when marking this obligation for deleveraging.
	// Only effective when `deleveraging_margin_call_started_slot != 0`.
	AutodeleverageTargetLtvPct uint8 `json:"autodeleverageTargetLtvPct"`

	// The lowest max LTV found amongst the collateral deposits
	LowestReserveDepositMaxLtvPct uint8 `json:"lowestReserveDepositMaxLtvPct"`

	// The number of obsolete reserves the obligation has a borrow in
	NumOfObsoleteBorrowReserves uint8    `json:"numOfObsoleteBorrowReserves"`
	Reserved                    [4]uint8 `json:"reserved"`
	HighestBorrowFactorPct      uint64   `json:"highestBorrowFactorPct"`

	// A timestamp at which the risk council most-recently marked this obligation for deleveraging.
	// Zero if not currently subject to deleveraging.
	AutodeleverageMarginCallStartedTimestamp uint64 `json:"autodeleverageMarginCallStartedTimestamp"`

	// Owner-defined, liquidator-executed orders applicable to this obligation.
	// Typical use-cases would be a stop-loss and a take-profit (possibly co-existing).
	Orders   [2]ObligationOrder `json:"orders"`
	Padding3 [93]uint64         `json:"padding3"`
}

func (obj Obligation) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Tag`:
	err = encoder.Encode(obj.Tag)
	if err != nil {
		return errors.NewField("Tag", err)
	}
	// Serialize `LastUpdate`:
	err = encoder.Encode(obj.LastUpdate)
	if err != nil {
		return errors.NewField("LastUpdate", err)
	}
	// Serialize `LendingMarket`:
	err = encoder.Encode(obj.LendingMarket)
	if err != nil {
		return errors.NewField("LendingMarket", err)
	}
	// Serialize `Owner`:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	// Serialize `Deposits`:
	err = encoder.Encode(obj.Deposits)
	if err != nil {
		return errors.NewField("Deposits", err)
	}
	// Serialize `LowestReserveDepositLiquidationLtv`:
	err = encoder.Encode(obj.LowestReserveDepositLiquidationLtv)
	if err != nil {
		return errors.NewField("LowestReserveDepositLiquidationLtv", err)
	}
	// Serialize `DepositedValueSf`:
	err = encoder.Encode(obj.DepositedValueSf)
	if err != nil {
		return errors.NewField("DepositedValueSf", err)
	}
	// Serialize `Borrows`:
	err = encoder.Encode(obj.Borrows)
	if err != nil {
		return errors.NewField("Borrows", err)
	}
	// Serialize `BorrowFactorAdjustedDebtValueSf`:
	err = encoder.Encode(obj.BorrowFactorAdjustedDebtValueSf)
	if err != nil {
		return errors.NewField("BorrowFactorAdjustedDebtValueSf", err)
	}
	// Serialize `BorrowedAssetsMarketValueSf`:
	err = encoder.Encode(obj.BorrowedAssetsMarketValueSf)
	if err != nil {
		return errors.NewField("BorrowedAssetsMarketValueSf", err)
	}
	// Serialize `AllowedBorrowValueSf`:
	err = encoder.Encode(obj.AllowedBorrowValueSf)
	if err != nil {
		return errors.NewField("AllowedBorrowValueSf", err)
	}
	// Serialize `UnhealthyBorrowValueSf`:
	err = encoder.Encode(obj.UnhealthyBorrowValueSf)
	if err != nil {
		return errors.NewField("UnhealthyBorrowValueSf", err)
	}
	// Serialize `DepositsAssetTiers`:
	err = encoder.Encode(obj.DepositsAssetTiers)
	if err != nil {
		return errors.NewField("DepositsAssetTiers", err)
	}
	// Serialize `BorrowsAssetTiers`:
	err = encoder.Encode(obj.BorrowsAssetTiers)
	if err != nil {
		return errors.NewField("BorrowsAssetTiers", err)
	}
	// Serialize `ElevationGroup`:
	err = encoder.Encode(obj.ElevationGroup)
	if err != nil {
		return errors.NewField("ElevationGroup", err)
	}
	// Serialize `NumOfObsoleteDepositReserves`:
	err = encoder.Encode(obj.NumOfObsoleteDepositReserves)
	if err != nil {
		return errors.NewField("NumOfObsoleteDepositReserves", err)
	}
	// Serialize `HasDebt`:
	err = encoder.Encode(obj.HasDebt)
	if err != nil {
		return errors.NewField("HasDebt", err)
	}
	// Serialize `Referrer`:
	err = encoder.Encode(obj.Referrer)
	if err != nil {
		return errors.NewField("Referrer", err)
	}
	// Serialize `BorrowingDisabled`:
	err = encoder.Encode(obj.BorrowingDisabled)
	if err != nil {
		return errors.NewField("BorrowingDisabled", err)
	}
	// Serialize `AutodeleverageTargetLtvPct`:
	err = encoder.Encode(obj.AutodeleverageTargetLtvPct)
	if err != nil {
		return errors.NewField("AutodeleverageTargetLtvPct", err)
	}
	// Serialize `LowestReserveDepositMaxLtvPct`:
	err = encoder.Encode(obj.LowestReserveDepositMaxLtvPct)
	if err != nil {
		return errors.NewField("LowestReserveDepositMaxLtvPct", err)
	}
	// Serialize `NumOfObsoleteBorrowReserves`:
	err = encoder.Encode(obj.NumOfObsoleteBorrowReserves)
	if err != nil {
		return errors.NewField("NumOfObsoleteBorrowReserves", err)
	}
	// Serialize `Reserved`:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return errors.NewField("Reserved", err)
	}
	// Serialize `HighestBorrowFactorPct`:
	err = encoder.Encode(obj.HighestBorrowFactorPct)
	if err != nil {
		return errors.NewField("HighestBorrowFactorPct", err)
	}
	// Serialize `AutodeleverageMarginCallStartedTimestamp`:
	err = encoder.Encode(obj.AutodeleverageMarginCallStartedTimestamp)
	if err != nil {
		return errors.NewField("AutodeleverageMarginCallStartedTimestamp", err)
	}
	// Serialize `Orders`:
	err = encoder.Encode(obj.Orders)
	if err != nil {
		return errors.NewField("Orders", err)
	}
	// Serialize `Padding3`:
	err = encoder.Encode(obj.Padding3)
	if err != nil {
		return errors.NewField("Padding3", err)
	}
	return nil
}

func (obj Obligation) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Obligation: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Obligation) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Tag`:
	err = decoder.Decode(&obj.Tag)
	if err != nil {
		return errors.NewField("Tag", err)
	}
	// Deserialize `LastUpdate`:
	err = decoder.Decode(&obj.LastUpdate)
	if err != nil {
		return errors.NewField("LastUpdate", err)
	}
	// Deserialize `LendingMarket`:
	err = decoder.Decode(&obj.LendingMarket)
	if err != nil {
		return errors.NewField("LendingMarket", err)
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	// Deserialize `Deposits`:
	err = decoder.Decode(&obj.Deposits)
	if err != nil {
		return errors.NewField("Deposits", err)
	}
	// Deserialize `LowestReserveDepositLiquidationLtv`:
	err = decoder.Decode(&obj.LowestReserveDepositLiquidationLtv)
	if err != nil {
		return errors.NewField("LowestReserveDepositLiquidationLtv", err)
	}
	// Deserialize `DepositedValueSf`:
	err = decoder.Decode(&obj.DepositedValueSf)
	if err != nil {
		return errors.NewField("DepositedValueSf", err)
	}
	// Deserialize `Borrows`:
	err = decoder.Decode(&obj.Borrows)
	if err != nil {
		return errors.NewField("Borrows", err)
	}
	// Deserialize `BorrowFactorAdjustedDebtValueSf`:
	err = decoder.Decode(&obj.BorrowFactorAdjustedDebtValueSf)
	if err != nil {
		return errors.NewField("BorrowFactorAdjustedDebtValueSf", err)
	}
	// Deserialize `BorrowedAssetsMarketValueSf`:
	err = decoder.Decode(&obj.BorrowedAssetsMarketValueSf)
	if err != nil {
		return errors.NewField("BorrowedAssetsMarketValueSf", err)
	}
	// Deserialize `AllowedBorrowValueSf`:
	err = decoder.Decode(&obj.AllowedBorrowValueSf)
	if err != nil {
		return errors.NewField("AllowedBorrowValueSf", err)
	}
	// Deserialize `UnhealthyBorrowValueSf`:
	err = decoder.Decode(&obj.UnhealthyBorrowValueSf)
	if err != nil {
		return errors.NewField("UnhealthyBorrowValueSf", err)
	}
	// Deserialize `DepositsAssetTiers`:
	err = decoder.Decode(&obj.DepositsAssetTiers)
	if err != nil {
		return errors.NewField("DepositsAssetTiers", err)
	}
	// Deserialize `BorrowsAssetTiers`:
	err = decoder.Decode(&obj.BorrowsAssetTiers)
	if err != nil {
		return errors.NewField("BorrowsAssetTiers", err)
	}
	// Deserialize `ElevationGroup`:
	err = decoder.Decode(&obj.ElevationGroup)
	if err != nil {
		return errors.NewField("ElevationGroup", err)
	}
	// Deserialize `NumOfObsoleteDepositReserves`:
	err = decoder.Decode(&obj.NumOfObsoleteDepositReserves)
	if err != nil {
		return errors.NewField("NumOfObsoleteDepositReserves", err)
	}
	// Deserialize `HasDebt`:
	err = decoder.Decode(&obj.HasDebt)
	if err != nil {
		return errors.NewField("HasDebt", err)
	}
	// Deserialize `Referrer`:
	err = decoder.Decode(&obj.Referrer)
	if err != nil {
		return errors.NewField("Referrer", err)
	}
	// Deserialize `BorrowingDisabled`:
	err = decoder.Decode(&obj.BorrowingDisabled)
	if err != nil {
		return errors.NewField("BorrowingDisabled", err)
	}
	// Deserialize `AutodeleverageTargetLtvPct`:
	err = decoder.Decode(&obj.AutodeleverageTargetLtvPct)
	if err != nil {
		return errors.NewField("AutodeleverageTargetLtvPct", err)
	}
	// Deserialize `LowestReserveDepositMaxLtvPct`:
	err = decoder.Decode(&obj.LowestReserveDepositMaxLtvPct)
	if err != nil {
		return errors.NewField("LowestReserveDepositMaxLtvPct", err)
	}
	// Deserialize `NumOfObsoleteBorrowReserves`:
	err = decoder.Decode(&obj.NumOfObsoleteBorrowReserves)
	if err != nil {
		return errors.NewField("NumOfObsoleteBorrowReserves", err)
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return errors.NewField("Reserved", err)
	}
	// Deserialize `HighestBorrowFactorPct`:
	err = decoder.Decode(&obj.HighestBorrowFactorPct)
	if err != nil {
		return errors.NewField("HighestBorrowFactorPct", err)
	}
	// Deserialize `AutodeleverageMarginCallStartedTimestamp`:
	err = decoder.Decode(&obj.AutodeleverageMarginCallStartedTimestamp)
	if err != nil {
		return errors.NewField("AutodeleverageMarginCallStartedTimestamp", err)
	}
	// Deserialize `Orders`:
	err = decoder.Decode(&obj.Orders)
	if err != nil {
		return errors.NewField("Orders", err)
	}
	// Deserialize `Padding3`:
	err = decoder.Decode(&obj.Padding3)
	if err != nil {
		return errors.NewField("Padding3", err)
	}
	return nil
}

func (obj *Obligation) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Obligation: %w", err)
	}
	return nil
}

func UnmarshalObligation(buf []byte) (*Obligation, error) {
	obj := new(Obligation)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type ReferrerState struct {
	ShortUrl solanago.PublicKey `json:"shortUrl"`
	Owner    solanago.PublicKey `json:"owner"`
}

func (obj ReferrerState) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `ShortUrl`:
	err = encoder.Encode(obj.ShortUrl)
	if err != nil {
		return errors.NewField("ShortUrl", err)
	}
	// Serialize `Owner`:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	return nil
}

func (obj ReferrerState) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding ReferrerState: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *ReferrerState) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `ShortUrl`:
	err = decoder.Decode(&obj.ShortUrl)
	if err != nil {
		return errors.NewField("ShortUrl", err)
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	return nil
}

func (obj *ReferrerState) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling ReferrerState: %w", err)
	}
	return nil
}

func UnmarshalReferrerState(buf []byte) (*ReferrerState, error) {
	obj := new(ReferrerState)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Referrer account -> each owner can have multiple accounts for specific reserves
type ReferrerTokenState struct {
	// Pubkey of the referrer/owner
	Referrer solanago.PublicKey `json:"referrer"`

	// Token mint for the account
	Mint solanago.PublicKey `json:"mint"`

	// Amount that has been accumulated and not claimed yet -> available to claim (scaled fraction)
	AmountUnclaimedSf binary.Uint128 `json:"amountUnclaimedSf"`

	// Amount that has been accumulated in total -> both already claimed and unclaimed (scaled fraction)
	AmountCumulativeSf binary.Uint128 `json:"amountCumulativeSf"`

	// Referrer token state bump, used for address validation
	Bump    uint64     `json:"bump"`
	Padding [31]uint64 `json:"padding"`
}

func (obj ReferrerTokenState) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Referrer`:
	err = encoder.Encode(obj.Referrer)
	if err != nil {
		return errors.NewField("Referrer", err)
	}
	// Serialize `Mint`:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return errors.NewField("Mint", err)
	}
	// Serialize `AmountUnclaimedSf`:
	err = encoder.Encode(obj.AmountUnclaimedSf)
	if err != nil {
		return errors.NewField("AmountUnclaimedSf", err)
	}
	// Serialize `AmountCumulativeSf`:
	err = encoder.Encode(obj.AmountCumulativeSf)
	if err != nil {
		return errors.NewField("AmountCumulativeSf", err)
	}
	// Serialize `Bump`:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return errors.NewField("Bump", err)
	}
	// Serialize `Padding`:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj ReferrerTokenState) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding ReferrerTokenState: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *ReferrerTokenState) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Referrer`:
	err = decoder.Decode(&obj.Referrer)
	if err != nil {
		return errors.NewField("Referrer", err)
	}
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return errors.NewField("Mint", err)
	}
	// Deserialize `AmountUnclaimedSf`:
	err = decoder.Decode(&obj.AmountUnclaimedSf)
	if err != nil {
		return errors.NewField("AmountUnclaimedSf", err)
	}
	// Deserialize `AmountCumulativeSf`:
	err = decoder.Decode(&obj.AmountCumulativeSf)
	if err != nil {
		return errors.NewField("AmountCumulativeSf", err)
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return errors.NewField("Bump", err)
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj *ReferrerTokenState) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling ReferrerTokenState: %w", err)
	}
	return nil
}

func UnmarshalReferrerTokenState(buf []byte) (*ReferrerTokenState, error) {
	obj := new(ReferrerTokenState)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type ShortUrl struct {
	Referrer solanago.PublicKey `json:"referrer"`
	ShortUrl string             `json:"shortUrl"`
}

func (obj ShortUrl) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Referrer`:
	err = encoder.Encode(obj.Referrer)
	if err != nil {
		return errors.NewField("Referrer", err)
	}
	// Serialize `ShortUrl`:
	err = encoder.Encode(obj.ShortUrl)
	if err != nil {
		return errors.NewField("ShortUrl", err)
	}
	return nil
}

func (obj ShortUrl) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding ShortUrl: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *ShortUrl) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Referrer`:
	err = decoder.Decode(&obj.Referrer)
	if err != nil {
		return errors.NewField("Referrer", err)
	}
	// Deserialize `ShortUrl`:
	err = decoder.Decode(&obj.ShortUrl)
	if err != nil {
		return errors.NewField("ShortUrl", err)
	}
	return nil
}

func (obj *ShortUrl) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling ShortUrl: %w", err)
	}
	return nil
}

func UnmarshalShortUrl(buf []byte) (*ShortUrl, error) {
	obj := new(ShortUrl)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Referrer account -> each owner can have multiple accounts for specific reserves
type UserMetadata struct {
	// Pubkey of the referrer/owner - pubkey::default if no referrer
	Referrer solanago.PublicKey `json:"referrer"`

	// Bump used for validation of account address
	Bump uint64 `json:"bump"`

	// User lookup table - used to store all user accounts - atas for each reserve mint, each obligation PDA, UserMetadata itself and all referrer_token_states if there is a referrer
	UserLookupTable solanago.PublicKey `json:"userLookupTable"`

	// User metadata account owner
	Owner    solanago.PublicKey `json:"owner"`
	Padding1 [51]uint64         `json:"padding1"`
	Padding2 [64]uint64         `json:"padding2"`
}

func (obj UserMetadata) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Referrer`:
	err = encoder.Encode(obj.Referrer)
	if err != nil {
		return errors.NewField("Referrer", err)
	}
	// Serialize `Bump`:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return errors.NewField("Bump", err)
	}
	// Serialize `UserLookupTable`:
	err = encoder.Encode(obj.UserLookupTable)
	if err != nil {
		return errors.NewField("UserLookupTable", err)
	}
	// Serialize `Owner`:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	// Serialize `Padding1`:
	err = encoder.Encode(obj.Padding1)
	if err != nil {
		return errors.NewField("Padding1", err)
	}
	// Serialize `Padding2`:
	err = encoder.Encode(obj.Padding2)
	if err != nil {
		return errors.NewField("Padding2", err)
	}
	return nil
}

func (obj UserMetadata) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding UserMetadata: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *UserMetadata) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Referrer`:
	err = decoder.Decode(&obj.Referrer)
	if err != nil {
		return errors.NewField("Referrer", err)
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return errors.NewField("Bump", err)
	}
	// Deserialize `UserLookupTable`:
	err = decoder.Decode(&obj.UserLookupTable)
	if err != nil {
		return errors.NewField("UserLookupTable", err)
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	// Deserialize `Padding1`:
	err = decoder.Decode(&obj.Padding1)
	if err != nil {
		return errors.NewField("Padding1", err)
	}
	// Deserialize `Padding2`:
	err = decoder.Decode(&obj.Padding2)
	if err != nil {
		return errors.NewField("Padding2", err)
	}
	return nil
}

func (obj *UserMetadata) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling UserMetadata: %w", err)
	}
	return nil
}

func UnmarshalUserMetadata(buf []byte) (*UserMetadata, error) {
	obj := new(UserMetadata)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type Reserve struct {
	// Version of the reserve
	Version uint64 `json:"version"`

	// Last slot when supply and rates updated
	LastUpdate LastUpdate `json:"lastUpdate"`

	// Lending market address
	LendingMarket  solanago.PublicKey `json:"lendingMarket"`
	FarmCollateral solanago.PublicKey `json:"farmCollateral"`
	FarmDebt       solanago.PublicKey `json:"farmDebt"`

	// Reserve liquidity
	Liquidity               ReserveLiquidity `json:"liquidity"`
	ReserveLiquidityPadding [150]uint64      `json:"reserveLiquidityPadding"`

	// Reserve collateral
	Collateral               ReserveCollateral `json:"collateral"`
	ReserveCollateralPadding [150]uint64       `json:"reserveCollateralPadding"`

	// Reserve configuration values
	Config                              ReserveConfig `json:"config"`
	ConfigPadding                       [116]uint64   `json:"configPadding"`
	BorrowedAmountOutsideElevationGroup uint64        `json:"borrowedAmountOutsideElevationGroup"`

	// Amount of token borrowed in lamport of debt asset in the given
	// elevation group when this reserve is part of the collaterals.
	BorrowedAmountsAgainstThisReserveInElevationGroups [32]uint64  `json:"borrowedAmountsAgainstThisReserveInElevationGroups"`
	Padding                                            [207]uint64 `json:"padding"`
}

func (obj Reserve) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Version`:
	err = encoder.Encode(obj.Version)
	if err != nil {
		return errors.NewField("Version", err)
	}
	// Serialize `LastUpdate`:
	err = encoder.Encode(obj.LastUpdate)
	if err != nil {
		return errors.NewField("LastUpdate", err)
	}
	// Serialize `LendingMarket`:
	err = encoder.Encode(obj.LendingMarket)
	if err != nil {
		return errors.NewField("LendingMarket", err)
	}
	// Serialize `FarmCollateral`:
	err = encoder.Encode(obj.FarmCollateral)
	if err != nil {
		return errors.NewField("FarmCollateral", err)
	}
	// Serialize `FarmDebt`:
	err = encoder.Encode(obj.FarmDebt)
	if err != nil {
		return errors.NewField("FarmDebt", err)
	}
	// Serialize `Liquidity`:
	err = encoder.Encode(obj.Liquidity)
	if err != nil {
		return errors.NewField("Liquidity", err)
	}
	// Serialize `ReserveLiquidityPadding`:
	err = encoder.Encode(obj.ReserveLiquidityPadding)
	if err != nil {
		return errors.NewField("ReserveLiquidityPadding", err)
	}
	// Serialize `Collateral`:
	err = encoder.Encode(obj.Collateral)
	if err != nil {
		return errors.NewField("Collateral", err)
	}
	// Serialize `ReserveCollateralPadding`:
	err = encoder.Encode(obj.ReserveCollateralPadding)
	if err != nil {
		return errors.NewField("ReserveCollateralPadding", err)
	}
	// Serialize `Config`:
	err = encoder.Encode(obj.Config)
	if err != nil {
		return errors.NewField("Config", err)
	}
	// Serialize `ConfigPadding`:
	err = encoder.Encode(obj.ConfigPadding)
	if err != nil {
		return errors.NewField("ConfigPadding", err)
	}
	// Serialize `BorrowedAmountOutsideElevationGroup`:
	err = encoder.Encode(obj.BorrowedAmountOutsideElevationGroup)
	if err != nil {
		return errors.NewField("BorrowedAmountOutsideElevationGroup", err)
	}
	// Serialize `BorrowedAmountsAgainstThisReserveInElevationGroups`:
	err = encoder.Encode(obj.BorrowedAmountsAgainstThisReserveInElevationGroups)
	if err != nil {
		return errors.NewField("BorrowedAmountsAgainstThisReserveInElevationGroups", err)
	}
	// Serialize `Padding`:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj Reserve) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Reserve: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Reserve) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Version`:
	err = decoder.Decode(&obj.Version)
	if err != nil {
		return errors.NewField("Version", err)
	}
	// Deserialize `LastUpdate`:
	err = decoder.Decode(&obj.LastUpdate)
	if err != nil {
		return errors.NewField("LastUpdate", err)
	}
	// Deserialize `LendingMarket`:
	err = decoder.Decode(&obj.LendingMarket)
	if err != nil {
		return errors.NewField("LendingMarket", err)
	}
	// Deserialize `FarmCollateral`:
	err = decoder.Decode(&obj.FarmCollateral)
	if err != nil {
		return errors.NewField("FarmCollateral", err)
	}
	// Deserialize `FarmDebt`:
	err = decoder.Decode(&obj.FarmDebt)
	if err != nil {
		return errors.NewField("FarmDebt", err)
	}
	// Deserialize `Liquidity`:
	err = decoder.Decode(&obj.Liquidity)
	if err != nil {
		return errors.NewField("Liquidity", err)
	}
	// Deserialize `ReserveLiquidityPadding`:
	err = decoder.Decode(&obj.ReserveLiquidityPadding)
	if err != nil {
		return errors.NewField("ReserveLiquidityPadding", err)
	}
	// Deserialize `Collateral`:
	err = decoder.Decode(&obj.Collateral)
	if err != nil {
		return errors.NewField("Collateral", err)
	}
	// Deserialize `ReserveCollateralPadding`:
	err = decoder.Decode(&obj.ReserveCollateralPadding)
	if err != nil {
		return errors.NewField("ReserveCollateralPadding", err)
	}
	// Deserialize `Config`:
	err = decoder.Decode(&obj.Config)
	if err != nil {
		return errors.NewField("Config", err)
	}
	// Deserialize `ConfigPadding`:
	err = decoder.Decode(&obj.ConfigPadding)
	if err != nil {
		return errors.NewField("ConfigPadding", err)
	}
	// Deserialize `BorrowedAmountOutsideElevationGroup`:
	err = decoder.Decode(&obj.BorrowedAmountOutsideElevationGroup)
	if err != nil {
		return errors.NewField("BorrowedAmountOutsideElevationGroup", err)
	}
	// Deserialize `BorrowedAmountsAgainstThisReserveInElevationGroups`:
	err = decoder.Decode(&obj.BorrowedAmountsAgainstThisReserveInElevationGroups)
	if err != nil {
		return errors.NewField("BorrowedAmountsAgainstThisReserveInElevationGroups", err)
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj *Reserve) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Reserve: %w", err)
	}
	return nil
}

func UnmarshalReserve(buf []byte) (*Reserve, error) {
	obj := new(Reserve)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}
