// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.
// This file contains instructions.

package kamino_lending

import (
	"bytes"
	"fmt"
	errors "github.com/gagliardetto/anchor-go/errors"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
)

// Builds a "init_lending_market" instruction.
func NewInitLendingMarketInstruction(
	// Params:
	quoteCurrencyParam [32]uint8,

	// Accounts:
	lendingMarketOwnerAccount solanago.PublicKey,
	lendingMarketAccount solanago.PublicKey,
	lendingMarketAuthorityAccount solanago.PublicKey,
	systemProgramAccount solanago.PublicKey,
	rentAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_InitLendingMarket[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `quoteCurrencyParam`:
		err = enc__.Encode(quoteCurrencyParam)
		if err != nil {
			return nil, errors.NewField("quoteCurrencyParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "lending_market_owner": Writable, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(lendingMarketOwnerAccount, true, true))
		// Account 1 "lending_market": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(lendingMarketAccount, true, false))
		// Account 2 "lending_market_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(lendingMarketAuthorityAccount, false, false))
		// Account 3 "system_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(systemProgramAccount, false, false))
		// Account 4 "rent": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(rentAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "update_lending_market" instruction.
func NewUpdateLendingMarketInstruction(
	// Params:
	modeParam uint64,
	valueParam [72]uint8,

	// Accounts:
	lendingMarketOwnerAccount solanago.PublicKey,
	lendingMarketAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_UpdateLendingMarket[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `modeParam`:
		err = enc__.Encode(modeParam)
		if err != nil {
			return nil, errors.NewField("modeParam", err)
		}
		// Serialize `valueParam`:
		err = enc__.Encode(valueParam)
		if err != nil {
			return nil, errors.NewField("valueParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "lending_market_owner": Read-only, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(lendingMarketOwnerAccount, false, true))
		// Account 1 "lending_market": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(lendingMarketAccount, true, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "update_lending_market_owner" instruction.
func NewUpdateLendingMarketOwnerInstruction(
	lendingMarketOwnerCachedAccount solanago.PublicKey,
	lendingMarketAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "lending_market_owner_cached": Read-only, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(lendingMarketOwnerCachedAccount, false, true))
		// Account 1 "lending_market": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(lendingMarketAccount, true, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		nil,
	), nil
}

// Builds a "init_reserve" instruction.
func NewInitReserveInstruction(
	lendingMarketOwnerAccount solanago.PublicKey,
	lendingMarketAccount solanago.PublicKey,
	lendingMarketAuthorityAccount solanago.PublicKey,
	reserveAccount solanago.PublicKey,
	reserveLiquidityMintAccount solanago.PublicKey,
	reserveLiquiditySupplyAccount solanago.PublicKey,
	feeReceiverAccount solanago.PublicKey,
	reserveCollateralMintAccount solanago.PublicKey,
	reserveCollateralSupplyAccount solanago.PublicKey,
	initialLiquiditySourceAccount solanago.PublicKey,
	rentAccount solanago.PublicKey,
	liquidityTokenProgramAccount solanago.PublicKey,
	collateralTokenProgramAccount solanago.PublicKey,
	systemProgramAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "lending_market_owner": Writable, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(lendingMarketOwnerAccount, true, true))
		// Account 1 "lending_market": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(lendingMarketAccount, false, false))
		// Account 2 "lending_market_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(lendingMarketAuthorityAccount, false, false))
		// Account 3 "reserve": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(reserveAccount, true, false))
		// Account 4 "reserve_liquidity_mint": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(reserveLiquidityMintAccount, false, false))
		// Account 5 "reserve_liquidity_supply": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(reserveLiquiditySupplyAccount, true, false))
		// Account 6 "fee_receiver": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(feeReceiverAccount, true, false))
		// Account 7 "reserve_collateral_mint": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(reserveCollateralMintAccount, true, false))
		// Account 8 "reserve_collateral_supply": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(reserveCollateralSupplyAccount, true, false))
		// Account 9 "initial_liquidity_source": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(initialLiquiditySourceAccount, true, false))
		// Account 10 "rent": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(rentAccount, false, false))
		// Account 11 "liquidity_token_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(liquidityTokenProgramAccount, false, false))
		// Account 12 "collateral_token_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(collateralTokenProgramAccount, false, false))
		// Account 13 "system_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(systemProgramAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		nil,
	), nil
}

// Builds a "init_farms_for_reserve" instruction.
func NewInitFarmsForReserveInstruction(
	// Params:
	modeParam uint8,

	// Accounts:
	lendingMarketOwnerAccount solanago.PublicKey,
	lendingMarketAccount solanago.PublicKey,
	lendingMarketAuthorityAccount solanago.PublicKey,
	reserveAccount solanago.PublicKey,
	farmsProgramAccount solanago.PublicKey,
	farmsGlobalConfigAccount solanago.PublicKey,
	farmStateAccount solanago.PublicKey,
	farmsVaultAuthorityAccount solanago.PublicKey,
	rentAccount solanago.PublicKey,
	systemProgramAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_InitFarmsForReserve[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `modeParam`:
		err = enc__.Encode(modeParam)
		if err != nil {
			return nil, errors.NewField("modeParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "lending_market_owner": Writable, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(lendingMarketOwnerAccount, true, true))
		// Account 1 "lending_market": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(lendingMarketAccount, false, false))
		// Account 2 "lending_market_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(lendingMarketAuthorityAccount, false, false))
		// Account 3 "reserve": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(reserveAccount, true, false))
		// Account 4 "farms_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(farmsProgramAccount, false, false))
		// Account 5 "farms_global_config": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(farmsGlobalConfigAccount, false, false))
		// Account 6 "farm_state": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(farmStateAccount, true, false))
		// Account 7 "farms_vault_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(farmsVaultAuthorityAccount, false, false))
		// Account 8 "rent": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(rentAccount, false, false))
		// Account 9 "system_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(systemProgramAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "update_reserve_config" instruction.
func NewUpdateReserveConfigInstruction(
	// Params:
	modeParam UpdateConfigMode,
	valueParam []byte,
	skipConfigIntegrityValidationParam bool,

	// Accounts:
	signerAccount solanago.PublicKey,
	globalConfigAccount solanago.PublicKey,
	lendingMarketAccount solanago.PublicKey,
	reserveAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_UpdateReserveConfig[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `modeParam`:
		err = enc__.Encode(modeParam)
		if err != nil {
			return nil, errors.NewField("modeParam", err)
		}
		// Serialize `valueParam`:
		err = enc__.Encode(valueParam)
		if err != nil {
			return nil, errors.NewField("valueParam", err)
		}
		// Serialize `skipConfigIntegrityValidationParam`:
		err = enc__.Encode(skipConfigIntegrityValidationParam)
		if err != nil {
			return nil, errors.NewField("skipConfigIntegrityValidationParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "signer": Read-only, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(signerAccount, false, true))
		// Account 1 "global_config": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(globalConfigAccount, false, false))
		// Account 2 "lending_market": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(lendingMarketAccount, false, false))
		// Account 3 "reserve": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(reserveAccount, true, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "redeem_fees" instruction.
func NewRedeemFeesInstruction(
	reserveAccount solanago.PublicKey,
	reserveLiquidityMintAccount solanago.PublicKey,
	reserveLiquidityFeeReceiverAccount solanago.PublicKey,
	reserveSupplyLiquidityAccount solanago.PublicKey,
	lendingMarketAccount solanago.PublicKey,
	lendingMarketAuthorityAccount solanago.PublicKey,
	tokenProgramAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "reserve": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(reserveAccount, true, false))
		// Account 1 "reserve_liquidity_mint": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(reserveLiquidityMintAccount, false, false))
		// Account 2 "reserve_liquidity_fee_receiver": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(reserveLiquidityFeeReceiverAccount, true, false))
		// Account 3 "reserve_supply_liquidity": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(reserveSupplyLiquidityAccount, true, false))
		// Account 4 "lending_market": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(lendingMarketAccount, false, false))
		// Account 5 "lending_market_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(lendingMarketAuthorityAccount, false, false))
		// Account 6 "token_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(tokenProgramAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		nil,
	), nil
}

// Builds a "withdraw_protocol_fee" instruction.
func NewWithdrawProtocolFeeInstruction(
	// Params:
	amountParam uint64,

	// Accounts:
	globalConfigAccount solanago.PublicKey,
	lendingMarketAccount solanago.PublicKey,
	reserveAccount solanago.PublicKey,
	reserveLiquidityMintAccount solanago.PublicKey,
	lendingMarketAuthorityAccount solanago.PublicKey,
	feeVaultAccount solanago.PublicKey,
	feeCollectorAtaAccount solanago.PublicKey,
	tokenProgramAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_WithdrawProtocolFee[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `amountParam`:
		err = enc__.Encode(amountParam)
		if err != nil {
			return nil, errors.NewField("amountParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "global_config": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(globalConfigAccount, false, false))
		// Account 1 "lending_market": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(lendingMarketAccount, false, false))
		// Account 2 "reserve": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(reserveAccount, false, false))
		// Account 3 "reserve_liquidity_mint": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(reserveLiquidityMintAccount, false, false))
		// Account 4 "lending_market_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(lendingMarketAuthorityAccount, false, false))
		// Account 5 "fee_vault": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(feeVaultAccount, true, false))
		// Account 6 "fee_collector_ata": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(feeCollectorAtaAccount, true, false))
		// Account 7 "token_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(tokenProgramAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "mark_obligation_for_deleveraging" instruction.
func NewMarkObligationForDeleveragingInstruction(
	// Params:
	autodeleverageTargetLtvPctParam uint8,

	// Accounts:
	riskCouncilAccount solanago.PublicKey,
	obligationAccount solanago.PublicKey,
	lendingMarketAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_MarkObligationForDeleveraging[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `autodeleverageTargetLtvPctParam`:
		err = enc__.Encode(autodeleverageTargetLtvPctParam)
		if err != nil {
			return nil, errors.NewField("autodeleverageTargetLtvPctParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "risk_council": Read-only, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(riskCouncilAccount, false, true))
		// Account 1 "obligation": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(obligationAccount, true, false))
		// Account 2 "lending_market": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(lendingMarketAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "refresh_reserve" instruction.
func NewRefreshReserveInstruction(
	reserveAccount solanago.PublicKey,
	lendingMarketAccount solanago.PublicKey,
	pythOracleAccount solanago.PublicKey,
	switchboardPriceOracleAccount solanago.PublicKey,
	switchboardTwapOracleAccount solanago.PublicKey,
	scopePricesAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "reserve": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(reserveAccount, true, false))
		// Account 1 "lending_market": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(lendingMarketAccount, false, false))
		// Account 2 "pyth_oracle": Read-only, Non-signer, Optional
		accounts__.Append(solanago.NewAccountMeta(pythOracleAccount, false, false))
		// Account 3 "switchboard_price_oracle": Read-only, Non-signer, Optional
		accounts__.Append(solanago.NewAccountMeta(switchboardPriceOracleAccount, false, false))
		// Account 4 "switchboard_twap_oracle": Read-only, Non-signer, Optional
		accounts__.Append(solanago.NewAccountMeta(switchboardTwapOracleAccount, false, false))
		// Account 5 "scope_prices": Read-only, Non-signer, Optional
		accounts__.Append(solanago.NewAccountMeta(scopePricesAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		nil,
	), nil
}

// Builds a "refresh_reserves_batch" instruction.
func NewRefreshReservesBatchInstruction(
	skipPriceUpdatesParam bool,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_RefreshReservesBatch[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `skipPriceUpdatesParam`:
		err = enc__.Encode(skipPriceUpdatesParam)
		if err != nil {
			return nil, errors.NewField("skipPriceUpdatesParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "deposit_reserve_liquidity" instruction.
func NewDepositReserveLiquidityInstruction(
	// Params:
	liquidityAmountParam uint64,

	// Accounts:
	ownerAccount solanago.PublicKey,
	reserveAccount solanago.PublicKey,
	lendingMarketAccount solanago.PublicKey,
	lendingMarketAuthorityAccount solanago.PublicKey,
	reserveLiquidityMintAccount solanago.PublicKey,
	reserveLiquiditySupplyAccount solanago.PublicKey,
	reserveCollateralMintAccount solanago.PublicKey,
	userSourceLiquidityAccount solanago.PublicKey,
	userDestinationCollateralAccount solanago.PublicKey,
	collateralTokenProgramAccount solanago.PublicKey,
	liquidityTokenProgramAccount solanago.PublicKey,
	instructionSysvarAccountAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_DepositReserveLiquidity[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `liquidityAmountParam`:
		err = enc__.Encode(liquidityAmountParam)
		if err != nil {
			return nil, errors.NewField("liquidityAmountParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "owner": Read-only, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(ownerAccount, false, true))
		// Account 1 "reserve": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(reserveAccount, true, false))
		// Account 2 "lending_market": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(lendingMarketAccount, false, false))
		// Account 3 "lending_market_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(lendingMarketAuthorityAccount, false, false))
		// Account 4 "reserve_liquidity_mint": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(reserveLiquidityMintAccount, false, false))
		// Account 5 "reserve_liquidity_supply": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(reserveLiquiditySupplyAccount, true, false))
		// Account 6 "reserve_collateral_mint": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(reserveCollateralMintAccount, true, false))
		// Account 7 "user_source_liquidity": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(userSourceLiquidityAccount, true, false))
		// Account 8 "user_destination_collateral": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(userDestinationCollateralAccount, true, false))
		// Account 9 "collateral_token_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(collateralTokenProgramAccount, false, false))
		// Account 10 "liquidity_token_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(liquidityTokenProgramAccount, false, false))
		// Account 11 "instruction_sysvar_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(instructionSysvarAccountAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "redeem_reserve_collateral" instruction.
func NewRedeemReserveCollateralInstruction(
	// Params:
	collateralAmountParam uint64,

	// Accounts:
	ownerAccount solanago.PublicKey,
	lendingMarketAccount solanago.PublicKey,
	reserveAccount solanago.PublicKey,
	lendingMarketAuthorityAccount solanago.PublicKey,
	reserveLiquidityMintAccount solanago.PublicKey,
	reserveCollateralMintAccount solanago.PublicKey,
	reserveLiquiditySupplyAccount solanago.PublicKey,
	userSourceCollateralAccount solanago.PublicKey,
	userDestinationLiquidityAccount solanago.PublicKey,
	collateralTokenProgramAccount solanago.PublicKey,
	liquidityTokenProgramAccount solanago.PublicKey,
	instructionSysvarAccountAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_RedeemReserveCollateral[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `collateralAmountParam`:
		err = enc__.Encode(collateralAmountParam)
		if err != nil {
			return nil, errors.NewField("collateralAmountParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "owner": Read-only, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(ownerAccount, false, true))
		// Account 1 "lending_market": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(lendingMarketAccount, false, false))
		// Account 2 "reserve": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(reserveAccount, true, false))
		// Account 3 "lending_market_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(lendingMarketAuthorityAccount, false, false))
		// Account 4 "reserve_liquidity_mint": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(reserveLiquidityMintAccount, false, false))
		// Account 5 "reserve_collateral_mint": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(reserveCollateralMintAccount, true, false))
		// Account 6 "reserve_liquidity_supply": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(reserveLiquiditySupplyAccount, true, false))
		// Account 7 "user_source_collateral": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(userSourceCollateralAccount, true, false))
		// Account 8 "user_destination_liquidity": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(userDestinationLiquidityAccount, true, false))
		// Account 9 "collateral_token_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(collateralTokenProgramAccount, false, false))
		// Account 10 "liquidity_token_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(liquidityTokenProgramAccount, false, false))
		// Account 11 "instruction_sysvar_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(instructionSysvarAccountAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "init_obligation" instruction.
func NewInitObligationInstruction(
	// Params:
	argsParam InitObligationArgs,

	// Accounts:
	obligationOwnerAccount solanago.PublicKey,
	feePayerAccount solanago.PublicKey,
	obligationAccount solanago.PublicKey,
	lendingMarketAccount solanago.PublicKey,
	seed1AccountAccount solanago.PublicKey,
	seed2AccountAccount solanago.PublicKey,
	ownerUserMetadataAccount solanago.PublicKey,
	rentAccount solanago.PublicKey,
	systemProgramAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_InitObligation[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `argsParam`:
		err = enc__.Encode(argsParam)
		if err != nil {
			return nil, errors.NewField("argsParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "obligation_owner": Read-only, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(obligationOwnerAccount, false, true))
		// Account 1 "fee_payer": Writable, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(feePayerAccount, true, true))
		// Account 2 "obligation": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(obligationAccount, true, false))
		// Account 3 "lending_market": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(lendingMarketAccount, false, false))
		// Account 4 "seed1_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(seed1AccountAccount, false, false))
		// Account 5 "seed2_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(seed2AccountAccount, false, false))
		// Account 6 "owner_user_metadata": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(ownerUserMetadataAccount, false, false))
		// Account 7 "rent": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(rentAccount, false, false))
		// Account 8 "system_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(systemProgramAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "init_obligation_farms_for_reserve" instruction.
func NewInitObligationFarmsForReserveInstruction(
	// Params:
	modeParam uint8,

	// Accounts:
	payerAccount solanago.PublicKey,
	ownerAccount solanago.PublicKey,
	obligationAccount solanago.PublicKey,
	lendingMarketAuthorityAccount solanago.PublicKey,
	reserveAccount solanago.PublicKey,
	reserveFarmStateAccount solanago.PublicKey,
	obligationFarmAccount solanago.PublicKey,
	lendingMarketAccount solanago.PublicKey,
	farmsProgramAccount solanago.PublicKey,
	rentAccount solanago.PublicKey,
	systemProgramAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_InitObligationFarmsForReserve[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `modeParam`:
		err = enc__.Encode(modeParam)
		if err != nil {
			return nil, errors.NewField("modeParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "payer": Writable, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(payerAccount, true, true))
		// Account 1 "owner": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(ownerAccount, false, false))
		// Account 2 "obligation": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(obligationAccount, true, false))
		// Account 3 "lending_market_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(lendingMarketAuthorityAccount, false, false))
		// Account 4 "reserve": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(reserveAccount, true, false))
		// Account 5 "reserve_farm_state": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(reserveFarmStateAccount, true, false))
		// Account 6 "obligation_farm": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(obligationFarmAccount, true, false))
		// Account 7 "lending_market": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(lendingMarketAccount, false, false))
		// Account 8 "farms_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(farmsProgramAccount, false, false))
		// Account 9 "rent": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(rentAccount, false, false))
		// Account 10 "system_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(systemProgramAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "refresh_obligation" instruction.
func NewRefreshObligationInstruction(
	lendingMarketAccount solanago.PublicKey,
	obligationAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "lending_market": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(lendingMarketAccount, false, false))
		// Account 1 "obligation": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(obligationAccount, true, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		nil,
	), nil
}

// Builds a "deposit_obligation_collateral" instruction.
func NewDepositObligationCollateralInstruction(
	// Params:
	collateralAmountParam uint64,

	// Accounts:
	ownerAccount solanago.PublicKey,
	obligationAccount solanago.PublicKey,
	lendingMarketAccount solanago.PublicKey,
	depositReserveAccount solanago.PublicKey,
	reserveDestinationCollateralAccount solanago.PublicKey,
	userSourceCollateralAccount solanago.PublicKey,
	tokenProgramAccount solanago.PublicKey,
	instructionSysvarAccountAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_DepositObligationCollateral[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `collateralAmountParam`:
		err = enc__.Encode(collateralAmountParam)
		if err != nil {
			return nil, errors.NewField("collateralAmountParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "owner": Read-only, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(ownerAccount, false, true))
		// Account 1 "obligation": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(obligationAccount, true, false))
		// Account 2 "lending_market": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(lendingMarketAccount, false, false))
		// Account 3 "deposit_reserve": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(depositReserveAccount, true, false))
		// Account 4 "reserve_destination_collateral": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(reserveDestinationCollateralAccount, true, false))
		// Account 5 "user_source_collateral": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(userSourceCollateralAccount, true, false))
		// Account 6 "token_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(tokenProgramAccount, false, false))
		// Account 7 "instruction_sysvar_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(instructionSysvarAccountAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "withdraw_obligation_collateral" instruction.
func NewWithdrawObligationCollateralInstruction(
	// Params:
	collateralAmountParam uint64,

	// Accounts:
	ownerAccount solanago.PublicKey,
	obligationAccount solanago.PublicKey,
	lendingMarketAccount solanago.PublicKey,
	lendingMarketAuthorityAccount solanago.PublicKey,
	withdrawReserveAccount solanago.PublicKey,
	reserveSourceCollateralAccount solanago.PublicKey,
	userDestinationCollateralAccount solanago.PublicKey,
	tokenProgramAccount solanago.PublicKey,
	instructionSysvarAccountAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_WithdrawObligationCollateral[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `collateralAmountParam`:
		err = enc__.Encode(collateralAmountParam)
		if err != nil {
			return nil, errors.NewField("collateralAmountParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "owner": Read-only, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(ownerAccount, false, true))
		// Account 1 "obligation": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(obligationAccount, true, false))
		// Account 2 "lending_market": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(lendingMarketAccount, false, false))
		// Account 3 "lending_market_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(lendingMarketAuthorityAccount, false, false))
		// Account 4 "withdraw_reserve": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(withdrawReserveAccount, true, false))
		// Account 5 "reserve_source_collateral": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(reserveSourceCollateralAccount, true, false))
		// Account 6 "user_destination_collateral": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(userDestinationCollateralAccount, true, false))
		// Account 7 "token_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(tokenProgramAccount, false, false))
		// Account 8 "instruction_sysvar_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(instructionSysvarAccountAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "borrow_obligation_liquidity" instruction.
func NewBorrowObligationLiquidityInstruction(
	// Params:
	liquidityAmountParam uint64,

	// Accounts:
	ownerAccount solanago.PublicKey,
	obligationAccount solanago.PublicKey,
	lendingMarketAccount solanago.PublicKey,
	lendingMarketAuthorityAccount solanago.PublicKey,
	borrowReserveAccount solanago.PublicKey,
	borrowReserveLiquidityMintAccount solanago.PublicKey,
	reserveSourceLiquidityAccount solanago.PublicKey,
	borrowReserveLiquidityFeeReceiverAccount solanago.PublicKey,
	userDestinationLiquidityAccount solanago.PublicKey,
	referrerTokenStateAccount solanago.PublicKey,
	tokenProgramAccount solanago.PublicKey,
	instructionSysvarAccountAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_BorrowObligationLiquidity[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `liquidityAmountParam`:
		err = enc__.Encode(liquidityAmountParam)
		if err != nil {
			return nil, errors.NewField("liquidityAmountParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "owner": Read-only, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(ownerAccount, false, true))
		// Account 1 "obligation": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(obligationAccount, true, false))
		// Account 2 "lending_market": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(lendingMarketAccount, false, false))
		// Account 3 "lending_market_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(lendingMarketAuthorityAccount, false, false))
		// Account 4 "borrow_reserve": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(borrowReserveAccount, true, false))
		// Account 5 "borrow_reserve_liquidity_mint": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(borrowReserveLiquidityMintAccount, false, false))
		// Account 6 "reserve_source_liquidity": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(reserveSourceLiquidityAccount, true, false))
		// Account 7 "borrow_reserve_liquidity_fee_receiver": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(borrowReserveLiquidityFeeReceiverAccount, true, false))
		// Account 8 "user_destination_liquidity": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(userDestinationLiquidityAccount, true, false))
		// Account 9 "referrer_token_state": Writable, Non-signer, Optional
		accounts__.Append(solanago.NewAccountMeta(referrerTokenStateAccount, true, false))
		// Account 10 "token_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(tokenProgramAccount, false, false))
		// Account 11 "instruction_sysvar_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(instructionSysvarAccountAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "repay_obligation_liquidity" instruction.
func NewRepayObligationLiquidityInstruction(
	// Params:
	liquidityAmountParam uint64,

	// Accounts:
	ownerAccount solanago.PublicKey,
	obligationAccount solanago.PublicKey,
	lendingMarketAccount solanago.PublicKey,
	repayReserveAccount solanago.PublicKey,
	reserveLiquidityMintAccount solanago.PublicKey,
	reserveDestinationLiquidityAccount solanago.PublicKey,
	userSourceLiquidityAccount solanago.PublicKey,
	tokenProgramAccount solanago.PublicKey,
	instructionSysvarAccountAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_RepayObligationLiquidity[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `liquidityAmountParam`:
		err = enc__.Encode(liquidityAmountParam)
		if err != nil {
			return nil, errors.NewField("liquidityAmountParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "owner": Read-only, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(ownerAccount, false, true))
		// Account 1 "obligation": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(obligationAccount, true, false))
		// Account 2 "lending_market": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(lendingMarketAccount, false, false))
		// Account 3 "repay_reserve": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(repayReserveAccount, true, false))
		// Account 4 "reserve_liquidity_mint": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(reserveLiquidityMintAccount, false, false))
		// Account 5 "reserve_destination_liquidity": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(reserveDestinationLiquidityAccount, true, false))
		// Account 6 "user_source_liquidity": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(userSourceLiquidityAccount, true, false))
		// Account 7 "token_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(tokenProgramAccount, false, false))
		// Account 8 "instruction_sysvar_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(instructionSysvarAccountAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "deposit_reserve_liquidity_and_obligation_collateral" instruction.
func NewDepositReserveLiquidityAndObligationCollateralInstruction(
	// Params:
	liquidityAmountParam uint64,

	// Accounts:
	ownerAccount solanago.PublicKey,
	obligationAccount solanago.PublicKey,
	lendingMarketAccount solanago.PublicKey,
	lendingMarketAuthorityAccount solanago.PublicKey,
	reserveAccount solanago.PublicKey,
	reserveLiquidityMintAccount solanago.PublicKey,
	reserveLiquiditySupplyAccount solanago.PublicKey,
	reserveCollateralMintAccount solanago.PublicKey,
	reserveDestinationDepositCollateralAccount solanago.PublicKey,
	userSourceLiquidityAccount solanago.PublicKey,
	placeholderUserDestinationCollateralAccount solanago.PublicKey,
	collateralTokenProgramAccount solanago.PublicKey,
	liquidityTokenProgramAccount solanago.PublicKey,
	instructionSysvarAccountAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_DepositReserveLiquidityAndObligationCollateral[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `liquidityAmountParam`:
		err = enc__.Encode(liquidityAmountParam)
		if err != nil {
			return nil, errors.NewField("liquidityAmountParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "owner": Writable, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(ownerAccount, true, true))
		// Account 1 "obligation": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(obligationAccount, true, false))
		// Account 2 "lending_market": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(lendingMarketAccount, false, false))
		// Account 3 "lending_market_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(lendingMarketAuthorityAccount, false, false))
		// Account 4 "reserve": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(reserveAccount, true, false))
		// Account 5 "reserve_liquidity_mint": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(reserveLiquidityMintAccount, false, false))
		// Account 6 "reserve_liquidity_supply": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(reserveLiquiditySupplyAccount, true, false))
		// Account 7 "reserve_collateral_mint": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(reserveCollateralMintAccount, true, false))
		// Account 8 "reserve_destination_deposit_collateral": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(reserveDestinationDepositCollateralAccount, true, false))
		// Account 9 "user_source_liquidity": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(userSourceLiquidityAccount, true, false))
		// Account 10 "placeholder_user_destination_collateral": Read-only, Non-signer, Optional
		accounts__.Append(solanago.NewAccountMeta(placeholderUserDestinationCollateralAccount, false, false))
		// Account 11 "collateral_token_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(collateralTokenProgramAccount, false, false))
		// Account 12 "liquidity_token_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(liquidityTokenProgramAccount, false, false))
		// Account 13 "instruction_sysvar_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(instructionSysvarAccountAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "withdraw_obligation_collateral_and_redeem_reserve_collateral" instruction.
func NewWithdrawObligationCollateralAndRedeemReserveCollateralInstruction(
	// Params:
	collateralAmountParam uint64,

	// Accounts:
	ownerAccount solanago.PublicKey,
	obligationAccount solanago.PublicKey,
	lendingMarketAccount solanago.PublicKey,
	lendingMarketAuthorityAccount solanago.PublicKey,
	withdrawReserveAccount solanago.PublicKey,
	reserveLiquidityMintAccount solanago.PublicKey,
	reserveSourceCollateralAccount solanago.PublicKey,
	reserveCollateralMintAccount solanago.PublicKey,
	reserveLiquiditySupplyAccount solanago.PublicKey,
	userDestinationLiquidityAccount solanago.PublicKey,
	placeholderUserDestinationCollateralAccount solanago.PublicKey,
	collateralTokenProgramAccount solanago.PublicKey,
	liquidityTokenProgramAccount solanago.PublicKey,
	instructionSysvarAccountAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_WithdrawObligationCollateralAndRedeemReserveCollateral[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `collateralAmountParam`:
		err = enc__.Encode(collateralAmountParam)
		if err != nil {
			return nil, errors.NewField("collateralAmountParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "owner": Writable, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(ownerAccount, true, true))
		// Account 1 "obligation": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(obligationAccount, true, false))
		// Account 2 "lending_market": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(lendingMarketAccount, false, false))
		// Account 3 "lending_market_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(lendingMarketAuthorityAccount, false, false))
		// Account 4 "withdraw_reserve": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(withdrawReserveAccount, true, false))
		// Account 5 "reserve_liquidity_mint": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(reserveLiquidityMintAccount, false, false))
		// Account 6 "reserve_source_collateral": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(reserveSourceCollateralAccount, true, false))
		// Account 7 "reserve_collateral_mint": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(reserveCollateralMintAccount, true, false))
		// Account 8 "reserve_liquidity_supply": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(reserveLiquiditySupplyAccount, true, false))
		// Account 9 "user_destination_liquidity": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(userDestinationLiquidityAccount, true, false))
		// Account 10 "placeholder_user_destination_collateral": Read-only, Non-signer, Optional
		accounts__.Append(solanago.NewAccountMeta(placeholderUserDestinationCollateralAccount, false, false))
		// Account 11 "collateral_token_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(collateralTokenProgramAccount, false, false))
		// Account 12 "liquidity_token_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(liquidityTokenProgramAccount, false, false))
		// Account 13 "instruction_sysvar_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(instructionSysvarAccountAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "liquidate_obligation_and_redeem_reserve_collateral" instruction.
func NewLiquidateObligationAndRedeemReserveCollateralInstruction(
	// Params:
	liquidityAmountParam uint64,
	minAcceptableReceivedLiquidityAmountParam uint64,
	maxAllowedLtvOverridePercentParam uint64,

	// Accounts:
	liquidatorAccount solanago.PublicKey,
	obligationAccount solanago.PublicKey,
	lendingMarketAccount solanago.PublicKey,
	lendingMarketAuthorityAccount solanago.PublicKey,
	repayReserveAccount solanago.PublicKey,
	repayReserveLiquidityMintAccount solanago.PublicKey,
	repayReserveLiquiditySupplyAccount solanago.PublicKey,
	withdrawReserveAccount solanago.PublicKey,
	withdrawReserveLiquidityMintAccount solanago.PublicKey,
	withdrawReserveCollateralMintAccount solanago.PublicKey,
	withdrawReserveCollateralSupplyAccount solanago.PublicKey,
	withdrawReserveLiquiditySupplyAccount solanago.PublicKey,
	withdrawReserveLiquidityFeeReceiverAccount solanago.PublicKey,
	userSourceLiquidityAccount solanago.PublicKey,
	userDestinationCollateralAccount solanago.PublicKey,
	userDestinationLiquidityAccount solanago.PublicKey,
	collateralTokenProgramAccount solanago.PublicKey,
	repayLiquidityTokenProgramAccount solanago.PublicKey,
	withdrawLiquidityTokenProgramAccount solanago.PublicKey,
	instructionSysvarAccountAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_LiquidateObligationAndRedeemReserveCollateral[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `liquidityAmountParam`:
		err = enc__.Encode(liquidityAmountParam)
		if err != nil {
			return nil, errors.NewField("liquidityAmountParam", err)
		}
		// Serialize `minAcceptableReceivedLiquidityAmountParam`:
		err = enc__.Encode(minAcceptableReceivedLiquidityAmountParam)
		if err != nil {
			return nil, errors.NewField("minAcceptableReceivedLiquidityAmountParam", err)
		}
		// Serialize `maxAllowedLtvOverridePercentParam`:
		err = enc__.Encode(maxAllowedLtvOverridePercentParam)
		if err != nil {
			return nil, errors.NewField("maxAllowedLtvOverridePercentParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "liquidator": Read-only, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(liquidatorAccount, false, true))
		// Account 1 "obligation": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(obligationAccount, true, false))
		// Account 2 "lending_market": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(lendingMarketAccount, false, false))
		// Account 3 "lending_market_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(lendingMarketAuthorityAccount, false, false))
		// Account 4 "repay_reserve": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(repayReserveAccount, true, false))
		// Account 5 "repay_reserve_liquidity_mint": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(repayReserveLiquidityMintAccount, false, false))
		// Account 6 "repay_reserve_liquidity_supply": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(repayReserveLiquiditySupplyAccount, true, false))
		// Account 7 "withdraw_reserve": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(withdrawReserveAccount, true, false))
		// Account 8 "withdraw_reserve_liquidity_mint": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(withdrawReserveLiquidityMintAccount, false, false))
		// Account 9 "withdraw_reserve_collateral_mint": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(withdrawReserveCollateralMintAccount, true, false))
		// Account 10 "withdraw_reserve_collateral_supply": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(withdrawReserveCollateralSupplyAccount, true, false))
		// Account 11 "withdraw_reserve_liquidity_supply": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(withdrawReserveLiquiditySupplyAccount, true, false))
		// Account 12 "withdraw_reserve_liquidity_fee_receiver": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(withdrawReserveLiquidityFeeReceiverAccount, true, false))
		// Account 13 "user_source_liquidity": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(userSourceLiquidityAccount, true, false))
		// Account 14 "user_destination_collateral": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(userDestinationCollateralAccount, true, false))
		// Account 15 "user_destination_liquidity": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(userDestinationLiquidityAccount, true, false))
		// Account 16 "collateral_token_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(collateralTokenProgramAccount, false, false))
		// Account 17 "repay_liquidity_token_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(repayLiquidityTokenProgramAccount, false, false))
		// Account 18 "withdraw_liquidity_token_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(withdrawLiquidityTokenProgramAccount, false, false))
		// Account 19 "instruction_sysvar_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(instructionSysvarAccountAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "flash_repay_reserve_liquidity" instruction.
func NewFlashRepayReserveLiquidityInstruction(
	// Params:
	liquidityAmountParam uint64,
	borrowInstructionIndexParam uint8,

	// Accounts:
	userTransferAuthorityAccount solanago.PublicKey,
	lendingMarketAuthorityAccount solanago.PublicKey,
	lendingMarketAccount solanago.PublicKey,
	reserveAccount solanago.PublicKey,
	reserveLiquidityMintAccount solanago.PublicKey,
	reserveDestinationLiquidityAccount solanago.PublicKey,
	userSourceLiquidityAccount solanago.PublicKey,
	reserveLiquidityFeeReceiverAccount solanago.PublicKey,
	referrerTokenStateAccount solanago.PublicKey,
	referrerAccountAccount solanago.PublicKey,
	sysvarInfoAccount solanago.PublicKey,
	tokenProgramAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_FlashRepayReserveLiquidity[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `liquidityAmountParam`:
		err = enc__.Encode(liquidityAmountParam)
		if err != nil {
			return nil, errors.NewField("liquidityAmountParam", err)
		}
		// Serialize `borrowInstructionIndexParam`:
		err = enc__.Encode(borrowInstructionIndexParam)
		if err != nil {
			return nil, errors.NewField("borrowInstructionIndexParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "user_transfer_authority": Read-only, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(userTransferAuthorityAccount, false, true))
		// Account 1 "lending_market_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(lendingMarketAuthorityAccount, false, false))
		// Account 2 "lending_market": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(lendingMarketAccount, false, false))
		// Account 3 "reserve": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(reserveAccount, true, false))
		// Account 4 "reserve_liquidity_mint": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(reserveLiquidityMintAccount, false, false))
		// Account 5 "reserve_destination_liquidity": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(reserveDestinationLiquidityAccount, true, false))
		// Account 6 "user_source_liquidity": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(userSourceLiquidityAccount, true, false))
		// Account 7 "reserve_liquidity_fee_receiver": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(reserveLiquidityFeeReceiverAccount, true, false))
		// Account 8 "referrer_token_state": Writable, Non-signer, Optional
		accounts__.Append(solanago.NewAccountMeta(referrerTokenStateAccount, true, false))
		// Account 9 "referrer_account": Writable, Non-signer, Optional
		accounts__.Append(solanago.NewAccountMeta(referrerAccountAccount, true, false))
		// Account 10 "sysvar_info": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(sysvarInfoAccount, false, false))
		// Account 11 "token_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(tokenProgramAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "flash_borrow_reserve_liquidity" instruction.
func NewFlashBorrowReserveLiquidityInstruction(
	// Params:
	liquidityAmountParam uint64,

	// Accounts:
	userTransferAuthorityAccount solanago.PublicKey,
	lendingMarketAuthorityAccount solanago.PublicKey,
	lendingMarketAccount solanago.PublicKey,
	reserveAccount solanago.PublicKey,
	reserveLiquidityMintAccount solanago.PublicKey,
	reserveSourceLiquidityAccount solanago.PublicKey,
	userDestinationLiquidityAccount solanago.PublicKey,
	reserveLiquidityFeeReceiverAccount solanago.PublicKey,
	referrerTokenStateAccount solanago.PublicKey,
	referrerAccountAccount solanago.PublicKey,
	sysvarInfoAccount solanago.PublicKey,
	tokenProgramAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_FlashBorrowReserveLiquidity[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `liquidityAmountParam`:
		err = enc__.Encode(liquidityAmountParam)
		if err != nil {
			return nil, errors.NewField("liquidityAmountParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "user_transfer_authority": Read-only, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(userTransferAuthorityAccount, false, true))
		// Account 1 "lending_market_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(lendingMarketAuthorityAccount, false, false))
		// Account 2 "lending_market": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(lendingMarketAccount, false, false))
		// Account 3 "reserve": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(reserveAccount, true, false))
		// Account 4 "reserve_liquidity_mint": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(reserveLiquidityMintAccount, false, false))
		// Account 5 "reserve_source_liquidity": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(reserveSourceLiquidityAccount, true, false))
		// Account 6 "user_destination_liquidity": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(userDestinationLiquidityAccount, true, false))
		// Account 7 "reserve_liquidity_fee_receiver": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(reserveLiquidityFeeReceiverAccount, true, false))
		// Account 8 "referrer_token_state": Writable, Non-signer, Optional
		accounts__.Append(solanago.NewAccountMeta(referrerTokenStateAccount, true, false))
		// Account 9 "referrer_account": Writable, Non-signer, Optional
		accounts__.Append(solanago.NewAccountMeta(referrerAccountAccount, true, false))
		// Account 10 "sysvar_info": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(sysvarInfoAccount, false, false))
		// Account 11 "token_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(tokenProgramAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "request_elevation_group" instruction.
func NewRequestElevationGroupInstruction(
	// Params:
	elevationGroupParam uint8,

	// Accounts:
	ownerAccount solanago.PublicKey,
	obligationAccount solanago.PublicKey,
	lendingMarketAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_RequestElevationGroup[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `elevationGroupParam`:
		err = enc__.Encode(elevationGroupParam)
		if err != nil {
			return nil, errors.NewField("elevationGroupParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "owner": Read-only, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(ownerAccount, false, true))
		// Account 1 "obligation": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(obligationAccount, true, false))
		// Account 2 "lending_market": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(lendingMarketAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "init_referrer_token_state" instruction.
func NewInitReferrerTokenStateInstruction(
	payerAccount solanago.PublicKey,
	lendingMarketAccount solanago.PublicKey,
	reserveAccount solanago.PublicKey,
	referrerAccount solanago.PublicKey,
	referrerTokenStateAccount solanago.PublicKey,
	rentAccount solanago.PublicKey,
	systemProgramAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "payer": Writable, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(payerAccount, true, true))
		// Account 1 "lending_market": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(lendingMarketAccount, false, false))
		// Account 2 "reserve": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(reserveAccount, false, false))
		// Account 3 "referrer": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(referrerAccount, false, false))
		// Account 4 "referrer_token_state": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(referrerTokenStateAccount, true, false))
		// Account 5 "rent": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(rentAccount, false, false))
		// Account 6 "system_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(systemProgramAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		nil,
	), nil
}

// Builds a "init_user_metadata" instruction.
func NewInitUserMetadataInstruction(
	// Params:
	userLookupTableParam solanago.PublicKey,

	// Accounts:
	ownerAccount solanago.PublicKey,
	feePayerAccount solanago.PublicKey,
	userMetadataAccount solanago.PublicKey,
	referrerUserMetadataAccount solanago.PublicKey,
	rentAccount solanago.PublicKey,
	systemProgramAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_InitUserMetadata[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `userLookupTableParam`:
		err = enc__.Encode(userLookupTableParam)
		if err != nil {
			return nil, errors.NewField("userLookupTableParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "owner": Read-only, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(ownerAccount, false, true))
		// Account 1 "fee_payer": Writable, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(feePayerAccount, true, true))
		// Account 2 "user_metadata": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(userMetadataAccount, true, false))
		// Account 3 "referrer_user_metadata": Read-only, Non-signer, Optional
		accounts__.Append(solanago.NewAccountMeta(referrerUserMetadataAccount, false, false))
		// Account 4 "rent": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(rentAccount, false, false))
		// Account 5 "system_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(systemProgramAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "withdraw_referrer_fees" instruction.
func NewWithdrawReferrerFeesInstruction(
	referrerAccount solanago.PublicKey,
	referrerTokenStateAccount solanago.PublicKey,
	reserveAccount solanago.PublicKey,
	reserveLiquidityMintAccount solanago.PublicKey,
	reserveSupplyLiquidityAccount solanago.PublicKey,
	referrerTokenAccountAccount solanago.PublicKey,
	lendingMarketAccount solanago.PublicKey,
	lendingMarketAuthorityAccount solanago.PublicKey,
	tokenProgramAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "referrer": Writable, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(referrerAccount, true, true))
		// Account 1 "referrer_token_state": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(referrerTokenStateAccount, true, false))
		// Account 2 "reserve": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(reserveAccount, true, false))
		// Account 3 "reserve_liquidity_mint": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(reserveLiquidityMintAccount, false, false))
		// Account 4 "reserve_supply_liquidity": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(reserveSupplyLiquidityAccount, true, false))
		// Account 5 "referrer_token_account": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(referrerTokenAccountAccount, true, false))
		// Account 6 "lending_market": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(lendingMarketAccount, false, false))
		// Account 7 "lending_market_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(lendingMarketAuthorityAccount, false, false))
		// Account 8 "token_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(tokenProgramAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		nil,
	), nil
}

// Builds a "init_referrer_state_and_short_url" instruction.
func NewInitReferrerStateAndShortUrlInstruction(
	// Params:
	shortUrlParam string,

	// Accounts:
	referrerAccount solanago.PublicKey,
	referrerStateAccount solanago.PublicKey,
	referrerShortUrlAccount solanago.PublicKey,
	referrerUserMetadataAccount solanago.PublicKey,
	rentAccount solanago.PublicKey,
	systemProgramAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_InitReferrerStateAndShortUrl[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `shortUrlParam`:
		err = enc__.Encode(shortUrlParam)
		if err != nil {
			return nil, errors.NewField("shortUrlParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "referrer": Writable, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(referrerAccount, true, true))
		// Account 1 "referrer_state": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(referrerStateAccount, true, false))
		// Account 2 "referrer_short_url": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(referrerShortUrlAccount, true, false))
		// Account 3 "referrer_user_metadata": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(referrerUserMetadataAccount, false, false))
		// Account 4 "rent": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(rentAccount, false, false))
		// Account 5 "system_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(systemProgramAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "delete_referrer_state_and_short_url" instruction.
func NewDeleteReferrerStateAndShortUrlInstruction(
	referrerAccount solanago.PublicKey,
	referrerStateAccount solanago.PublicKey,
	shortUrlAccount solanago.PublicKey,
	rentAccount solanago.PublicKey,
	systemProgramAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "referrer": Writable, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(referrerAccount, true, true))
		// Account 1 "referrer_state": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(referrerStateAccount, true, false))
		// Account 2 "short_url": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(shortUrlAccount, true, false))
		// Account 3 "rent": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(rentAccount, false, false))
		// Account 4 "system_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(systemProgramAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		nil,
	), nil
}

// Builds a "set_obligation_order" instruction.
func NewSetObligationOrderInstruction(
	// Params:
	indexParam uint8,
	orderParam ObligationOrder,

	// Accounts:
	ownerAccount solanago.PublicKey,
	obligationAccount solanago.PublicKey,
	lendingMarketAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_SetObligationOrder[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `indexParam`:
		err = enc__.Encode(indexParam)
		if err != nil {
			return nil, errors.NewField("indexParam", err)
		}
		// Serialize `orderParam`:
		err = enc__.Encode(orderParam)
		if err != nil {
			return nil, errors.NewField("orderParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "owner": Read-only, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(ownerAccount, false, true))
		// Account 1 "obligation": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(obligationAccount, true, false))
		// Account 2 "lending_market": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(lendingMarketAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "init_global_config" instruction.
func NewInitGlobalConfigInstruction(
	payerAccount solanago.PublicKey,
	globalConfigAccount solanago.PublicKey,
	programDataAccount solanago.PublicKey,
	systemProgramAccount solanago.PublicKey,
	rentAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "payer": Writable, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(payerAccount, true, true))
		// Account 1 "global_config": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(globalConfigAccount, true, false))
		// Account 2 "program_data": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(programDataAccount, false, false))
		// Account 3 "system_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(systemProgramAccount, false, false))
		// Account 4 "rent": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(rentAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		nil,
	), nil
}

// Builds a "update_global_config" instruction.
func NewUpdateGlobalConfigInstruction(
	// Params:
	modeParam UpdateGlobalConfigMode,
	valueParam []byte,

	// Accounts:
	globalAdminAccount solanago.PublicKey,
	globalConfigAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_UpdateGlobalConfig[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `modeParam`:
		err = enc__.Encode(modeParam)
		if err != nil {
			return nil, errors.NewField("modeParam", err)
		}
		// Serialize `valueParam`:
		err = enc__.Encode(valueParam)
		if err != nil {
			return nil, errors.NewField("valueParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "global_admin": Read-only, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(globalAdminAccount, false, true))
		// Account 1 "global_config": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(globalConfigAccount, true, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "update_global_config_admin" instruction.
func NewUpdateGlobalConfigAdminInstruction(
	pendingAdminAccount solanago.PublicKey,
	globalConfigAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "pending_admin": Read-only, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(pendingAdminAccount, false, true))
		// Account 1 "global_config": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(globalConfigAccount, true, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		nil,
	), nil
}

// Builds a "idl_missing_types" instruction.
func NewIdlMissingTypesInstruction(
	// Params:
	reserveFarmKindParam ReserveFarmKind,
	assetTierParam AssetTier,
	feeCalculationParam FeeCalculation,
	reserveStatusParam ReserveStatus,
	updateConfigModeParam UpdateConfigMode,
	updateLendingMarketConfigValueParam UpdateLendingMarketConfigValue,
	updateLendingMarketConfigModeParam UpdateLendingMarketMode,

	// Accounts:
	signerAccount solanago.PublicKey,
	globalConfigAccount solanago.PublicKey,
	lendingMarketAccount solanago.PublicKey,
	reserveAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_IdlMissingTypes[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `reserveFarmKindParam`:
		err = enc__.Encode(reserveFarmKindParam)
		if err != nil {
			return nil, errors.NewField("reserveFarmKindParam", err)
		}
		// Serialize `assetTierParam`:
		err = enc__.Encode(assetTierParam)
		if err != nil {
			return nil, errors.NewField("assetTierParam", err)
		}
		// Serialize `feeCalculationParam`:
		err = enc__.Encode(feeCalculationParam)
		if err != nil {
			return nil, errors.NewField("feeCalculationParam", err)
		}
		// Serialize `reserveStatusParam`:
		err = enc__.Encode(reserveStatusParam)
		if err != nil {
			return nil, errors.NewField("reserveStatusParam", err)
		}
		// Serialize `updateConfigModeParam`:
		err = enc__.Encode(updateConfigModeParam)
		if err != nil {
			return nil, errors.NewField("updateConfigModeParam", err)
		}
		// Serialize `updateLendingMarketConfigValueParam`:
		{
			err := EncodeUpdateLendingMarketConfigValue(enc__, updateLendingMarketConfigValueParam)
			if err != nil {
				return nil, errors.NewField("updateLendingMarketConfigValueParam", err)
			}
		}
		// Serialize `updateLendingMarketConfigModeParam`:
		err = enc__.Encode(updateLendingMarketConfigModeParam)
		if err != nil {
			return nil, errors.NewField("updateLendingMarketConfigModeParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "signer": Read-only, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(signerAccount, false, true))
		// Account 1 "global_config": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(globalConfigAccount, false, false))
		// Account 2 "lending_market": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(lendingMarketAccount, false, false))
		// Account 3 "reserve": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(reserveAccount, true, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}
